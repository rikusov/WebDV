import { BaseController } from '@docsvision/webclient/System/BaseController';
import { RequestOptions } from '@docsvision/webclient/Legacy/Utils';
import { GenModels } from '@docsvision/webclient/Generated/DocsVision.WebClient.Models';
export declare namespace GenControllers {
    /**
     * Defines  FilePreviewController
     */
    interface IFilePreviewController {
        /**
         * HTTP: /File/DownloadPdf
         *
         * @returns file stream
         */
        downloadPdf(fileId: string, options?: RequestOptions): JQueryDeferred<string>;
    }
    class FilePreviewController extends BaseController implements IFilePreviewController {
        downloadPdf(fileId: string, options?: RequestOptions): JQueryDeferred<string>;
    }
}
export declare type $FilePreviewController = {
    filePreviewController: GenControllers.IFilePreviewController;
};
export declare const $FilePreviewController: string | ((model?: $FilePreviewController) => GenControllers.IFilePreviewController);
export declare namespace GenControllers {
    /**
     * File controller
     */
    interface IRazorControlController {
        /**
         * Render razor control
         *
         * @param viewName View name
         * @param model Model
         * @param viewPath View path
         * @param viewData Additional data
         *
         * @returns Rendered control
         */
        render<T>(viewName: string, model: T, viewPath: string, viewData?: Array<any>, options?: RequestOptions): JQueryDeferred<string>;
    }
    class RazorControlController extends BaseController implements IRazorControlController {
        render<T>(viewName: string, model: T, viewPath: string, viewData?: Array<any>, options?: RequestOptions): JQueryDeferred<string>;
    }
}
export declare type $RazorControlController = {
    razorControlController: GenControllers.IRazorControlController;
};
export declare const $RazorControlController: string | ((model?: $RazorControlController) => GenControllers.IRazorControlController);
export declare namespace GenControllers {
    /**
     * Layout links controller
     */
    interface ILayoutLinksMvcController {
        /**
         * POST: /LayoutLinks/GetLinksResult
         */
        getLinksResult(queryViewRequest: GenModels.QueryViewRequest, allowedCardTypes?: Array<string>, options?: RequestOptions): JQueryDeferred<string>;
    }
    class LayoutLinksMvcController extends BaseController implements ILayoutLinksMvcController {
        getLinksResult(queryViewRequest: GenModels.QueryViewRequest, allowedCardTypes?: Array<string>, options?: RequestOptions): JQueryDeferred<string>;
    }
}
export declare type $LayoutLinksMvcController = {
    layoutLinksMvcController: GenControllers.ILayoutLinksMvcController;
};
export declare const $LayoutLinksMvcController: string | ((model?: $LayoutLinksMvcController) => GenControllers.ILayoutLinksMvcController);
export declare namespace GenControllers {
    /**
     * Cards controller
     */
    interface ICardController {
        /**
         * HTTP: /Card/SetWasRead
         */
        setWasRead(cardIds: Array<string>, setRead?: boolean, options?: RequestOptions): JQueryDeferred<string>;
        /**
         * HTTP: /Card/CheckLock
         */
        checkLock(cardId: string, options?: RequestOptions): JQueryDeferred<string>;
        /**
         * HTTP: /Card/CheckModified
         */
        checkModified(cardId: string, timestamp: number, options?: RequestOptions): JQueryDeferred<string>;
        /**
         * HTTP: /Navigator/KindAvailable
         */
        checkKindCreatable(cardTypeId: string, cardKindId: string, options?: RequestOptions): JQueryDeferred<string>;
        /**
         * HTTP: /Card/GetViewRoute
         */
        getViewRoute(cardId: string, options?: RequestOptions): JQueryDeferred<string>;
        /**
         * HTTP: /Card/GetViewList
         */
        getViewList(folderId: string, options?: RequestOptions): JQueryDeferred<string>;
        /**
         * HTTP: /Card/IsViewInList
         */
        isViewInList(folderId: string, viewId: string, options?: RequestOptions): JQueryDeferred<string>;
        /**
         * HTTP: /Card/Show/id
         */
        show(id: string, options?: RequestOptions): JQueryDeferred<string>;
        /**
         * HTTP: /Card/UnknownCardView/cardId
         */
        unknownCardView(cardId: string, options?: RequestOptions): JQueryDeferred<string>;
        /**
         * HTTP: /Card/GetReferenceList
         *
         * @param cardId card id
         *
         * @returns reference list model
         */
        getReferenceList(cardId: string, options?: RequestOptions): JQueryDeferred<string>;
        /**
         * HTTP: /Card/GetReferenceListContent
         *
         * @param cardId card id
         *
         * @returns reference list model content
         */
        getReferenceListContent(cardId: string, options?: RequestOptions): JQueryDeferred<string>;
        /**
         * HTTP: /Navigator/DeleteLink
         *
         * @param cardId card id
         * @param timestamp card timestamp
         * @param linkId link id
         */
        deleteLink(cardId: string, timestamp: number, linkId: string, options?: RequestOptions): JQueryDeferred<string>;
    }
    class CardController extends BaseController implements ICardController {
        setWasRead(cardIds: Array<string>, setRead?: boolean, options?: RequestOptions): JQueryDeferred<string>;
        checkLock(cardId: string, options?: RequestOptions): JQueryDeferred<string>;
        checkModified(cardId: string, timestamp: number, options?: RequestOptions): JQueryDeferred<string>;
        checkKindCreatable(cardTypeId: string, cardKindId: string, options?: RequestOptions): JQueryDeferred<string>;
        getViewRoute(cardId: string, options?: RequestOptions): JQueryDeferred<string>;
        getViewList(folderId: string, options?: RequestOptions): JQueryDeferred<string>;
        isViewInList(folderId: string, viewId: string, options?: RequestOptions): JQueryDeferred<string>;
        show(id: string, options?: RequestOptions): JQueryDeferred<string>;
        unknownCardView(cardId: string, options?: RequestOptions): JQueryDeferred<string>;
        getReferenceList(cardId: string, options?: RequestOptions): JQueryDeferred<string>;
        getReferenceListContent(cardId: string, options?: RequestOptions): JQueryDeferred<string>;
        deleteLink(cardId: string, timestamp: number, linkId: string, options?: RequestOptions): JQueryDeferred<string>;
    }
}
export declare type $CardController = {
    cardController: GenControllers.ICardController;
};
export declare const $CardController: string | ((model?: $CardController) => GenControllers.ICardController);
export declare namespace GenControllers {
    /**
     * Error controller
     */
    interface IErrorController {
        /**
         * HTTP: /Error/Index
         */
        index(statusCode: number, exception: any, options?: RequestOptions): JQueryDeferred<string>;
        /**
         * HTTP: /Error/AccessDenied
         */
        accessDenied(options?: RequestOptions): JQueryDeferred<string>;
    }
    class ErrorController extends BaseController implements IErrorController {
        index(statusCode: number, exception: any, options?: RequestOptions): JQueryDeferred<string>;
        accessDenied(options?: RequestOptions): JQueryDeferred<string>;
    }
}
export declare type $ErrorController = {
    errorController: GenControllers.IErrorController;
};
export declare const $ErrorController: string | ((model?: $ErrorController) => GenControllers.IErrorController);
export declare namespace GenControllers {
    /**
     * Navigator controller
     */
    interface INavigatorController {
        /**
         * HTTP: /Navigator/GetFolderTree
         */
        getNavigatorFolders(id?: string, excludeSearchParamFolder?: boolean, options?: RequestOptions): JQueryDeferred<string>;
        /**
         * HTTP: /Navigator/AddUserFolder
         */
        attachUserFolders(folderIds: Array<string>, options?: RequestOptions): JQueryDeferred<string>;
        /**
         * Index
         */
        index(options?: RequestOptions): JQueryDeferred<string>;
        /**
         * Awake
         */
        awake(options?: RequestOptions): JQueryDeferred<string>;
        /**
         * HTTP: /Navigator/About
         */
        about(options?: RequestOptions): JQueryDeferred<string>;
        /**
         * HTTP: /Navigator/SwitchView
         */
        switchView(options?: RequestOptions): JQueryDeferred<string>;
        /**
         * HTTP: /Navigator/GetCardCreateLinks
         */
        getCardCreateLinks(folderId: string, options?: RequestOptions): JQueryDeferred<string>;
        /**
         * HTTP: /Navigator/GetCardCreateTemplates
         */
        getCardCreateTemplates(folderId: string, options?: RequestOptions): JQueryDeferred<string>;
        /**
         * HTTP: /Navigator/GetCardKinds
         */
        getCardKinds(cardTypeId: string, folderId: string, options?: RequestOptions): JQueryDeferred<string>;
        /**
         * HTTP: /Navigator/SendFoldersAndUnreadCounters
         */
        sendFoldersAndUnreadCounters(unreadCountersRequest: GenModels.UnreadCountersRequest, options?: RequestOptions): JQueryDeferred<string>;
        /**
         * HTTP: /Navigator/ShowSelectExistingCard
         */
        showSelectExistingCard(cardId: string, isReport?: boolean, allowedLinkTypes?: Array<string>, options?: RequestOptions): JQueryDeferred<string>;
        /**
         * HTTP: /Navigator/ShowSelectNewDocumentKind
         */
        showSelectNewDocumentKind(isReport?: boolean, options?: RequestOptions): JQueryDeferred<string>;
        /**
         * HTTP: /Navigator/AttachLink
         */
        attachLink(model: GenModels.LinkAddModel, options?: RequestOptions): JQueryDeferred<string>;
        /**
         * HTTP: /Navigator/HealthCheck
         */
        healthCheck(options?: RequestOptions): JQueryDeferred<string>;
    }
    class NavigatorController extends BaseController implements INavigatorController {
        getNavigatorFolders(id?: string, excludeSearchParamFolder?: boolean, options?: RequestOptions): JQueryDeferred<string>;
        attachUserFolders(folderIds: Array<string>, options?: RequestOptions): JQueryDeferred<string>;
        index(options?: RequestOptions): JQueryDeferred<string>;
        awake(options?: RequestOptions): JQueryDeferred<string>;
        about(options?: RequestOptions): JQueryDeferred<string>;
        switchView(options?: RequestOptions): JQueryDeferred<string>;
        getCardCreateLinks(folderId: string, options?: RequestOptions): JQueryDeferred<string>;
        getCardCreateTemplates(folderId: string, options?: RequestOptions): JQueryDeferred<string>;
        getCardKinds(cardTypeId: string, folderId: string, options?: RequestOptions): JQueryDeferred<string>;
        sendFoldersAndUnreadCounters(unreadCountersRequest: GenModels.UnreadCountersRequest, options?: RequestOptions): JQueryDeferred<string>;
        showSelectExistingCard(cardId: string, isReport?: boolean, allowedLinkTypes?: Array<string>, options?: RequestOptions): JQueryDeferred<string>;
        showSelectNewDocumentKind(isReport?: boolean, options?: RequestOptions): JQueryDeferred<string>;
        attachLink(model: GenModels.LinkAddModel, options?: RequestOptions): JQueryDeferred<string>;
        healthCheck(options?: RequestOptions): JQueryDeferred<string>;
    }
}
export declare type $NavigatorController = {
    navigatorController: GenControllers.INavigatorController;
};
export declare const $NavigatorController: string | ((model?: $NavigatorController) => GenControllers.INavigatorController);
export declare namespace GenControllers {
    /**
     * Defines  DataVisualizationController
     */
    interface IDataVisualizationController {
        /**
         * generate new file with data visualization
         */
        generate(generatorType: GenModels.ImageGeneratorType, cardId: string, fileCardId: string, fileVersionId: string, options?: RequestOptions): JQueryDeferred<any>;
    }
    class DataVisualizationController extends BaseController implements IDataVisualizationController {
        generate(generatorType: GenModels.ImageGeneratorType, cardId: string, fileCardId: string, fileVersionId: string, options?: RequestOptions): JQueryDeferred<any>;
    }
}
export declare type $DataVisualizationController = {
    dataVisualizationController: GenControllers.IDataVisualizationController;
};
export declare const $DataVisualizationController: string | ((model?: $DataVisualizationController) => GenControllers.IDataVisualizationController);
export declare namespace GenControllers {
    /**
     * Business calendar controller
     */
    interface ITaskGroupPerformersController {
        /**
         * Calculate start/end dates of task group intervals, based on the specified durations.
         *
         * @param requestModel Request model
         */
        calculatePerformanceIntervalsDates(requestModel: GenModels.TaskGroupIntervalsCalculationRequestModel, options?: RequestOptions): JQueryDeferred<Array<GenModels.TaskGroupIntervalInfo>>;
    }
    class TaskGroupPerformersController extends BaseController implements ITaskGroupPerformersController {
        calculatePerformanceIntervalsDates(requestModel: GenModels.TaskGroupIntervalsCalculationRequestModel, options?: RequestOptions): JQueryDeferred<Array<GenModels.TaskGroupIntervalInfo>>;
    }
}
export declare type $TaskGroupPerformersController = {
    taskGroupPerformersController: GenControllers.ITaskGroupPerformersController;
};
export declare const $TaskGroupPerformersController: string | ((model?: $TaskGroupPerformersController) => GenControllers.ITaskGroupPerformersController);
export declare namespace GenControllers {
    /**
     * CardKind controller
     */
    interface ICardKindController {
        /**
         * Get card kind by id.
         *
         * @param cardKindId Card kind identifier
         */
        getCardKind(cardKindId: string, options?: RequestOptions): JQueryDeferred<GenModels.CardKindModel>;
        /**
         * Get card kinds by list of ids.
         *
         * @param cardKinds
         *
         * @returns Collection of kinds
         */
        getCardKinds(cardKinds: GenModels.CollectionRequestModelOf<string>, options?: RequestOptions): JQueryDeferred<Array<GenModels.CardKindModel>>;
    }
    class CardKindController extends BaseController implements ICardKindController {
        getCardKind(cardKindId: string, options?: RequestOptions): JQueryDeferred<GenModels.CardKindModel>;
        getCardKinds(cardKinds: GenModels.CollectionRequestModelOf<string>, options?: RequestOptions): JQueryDeferred<Array<GenModels.CardKindModel>>;
    }
}
export declare type $CardKindController = {
    cardKindController: GenControllers.ICardKindController;
};
export declare const $CardKindController: string | ((model?: $CardKindController) => GenControllers.ICardKindController);
export declare namespace GenControllers {
    /**
     * Barcode search button controller
     */
    interface IBarcodeSearchButtonController {
        /**
         * Search
         *
         * @param barcodeSearchRequestModel Request model
         */
        search(barcodeSearchRequestModel: GenModels.BarcodeSearchRequestModel, options?: RequestOptions): JQueryDeferred<GenModels.BarcodeSearchResponseModel>;
    }
    class BarcodeSearchButtonController extends BaseController implements IBarcodeSearchButtonController {
        search(barcodeSearchRequestModel: GenModels.BarcodeSearchRequestModel, options?: RequestOptions): JQueryDeferred<GenModels.BarcodeSearchResponseModel>;
    }
}
export declare type $BarcodeSearchButtonController = {
    barcodeSearchButtonController: GenControllers.IBarcodeSearchButtonController;
};
export declare const $BarcodeSearchButtonController: string | ((model?: $BarcodeSearchButtonController) => GenControllers.IBarcodeSearchButtonController);
export declare namespace GenControllers {
    /**
     * Access card data controller
     */
    interface ICardDataController {
        /**
         * Get value of the field
         */
        getFieldValue(request: GenModels.GetFieldValueRequest, options?: RequestOptions): JQueryDeferred<any>;
    }
    class CardDataController extends BaseController implements ICardDataController {
        getFieldValue(request: GenModels.GetFieldValueRequest, options?: RequestOptions): JQueryDeferred<any>;
    }
}
export declare type $CardDataController = {
    cardDataController: GenControllers.ICardDataController;
};
export declare const $CardDataController: string | ((model?: $CardDataController) => GenControllers.ICardDataController);
export declare namespace GenControllers {
    /**
     * Defines card lock controller
     */
    interface IDisableCardController {
        /**
         * /api/LayoutCard/DisableCard
         */
        disableCard(cardId: string, reason: GenModels.Reason, options?: RequestOptions): JQueryDeferred<any>;
        /**
         * /api/LayoutCard/EnableCard
         */
        enableCard(cardId: string, options?: RequestOptions): JQueryDeferred<any>;
        /**
         * /api/LayoutCard/RemoveAllCardLocks
         */
        removeAllCardLocks(options?: RequestOptions): JQueryDeferred<void>;
    }
    class DisableCardController extends BaseController implements IDisableCardController {
        disableCard(cardId: string, reason: GenModels.Reason, options?: RequestOptions): JQueryDeferred<any>;
        enableCard(cardId: string, options?: RequestOptions): JQueryDeferred<any>;
        removeAllCardLocks(options?: RequestOptions): JQueryDeferred<void>;
    }
}
export declare type $DisableCardController = {
    disableCardController: GenControllers.IDisableCardController;
};
export declare const $DisableCardController: string | ((model?: $DisableCardController) => GenControllers.IDisableCardController);
export declare namespace GenControllers {
    /**
     * Department controller
     */
    interface IDepartmentController {
        /**
         * Get staff department by id.
         *
         * @param departmentId Department's identifier
         */
        getStaffDepartment(departmentId: string, options?: RequestOptions): JQueryDeferred<GenModels.DepartmentModel>;
        /**
         * Get partner department by id.
         *
         * @param departmentId Department's identifier
         */
        getPartnerDepartment(departmentId: string, options?: RequestOptions): JQueryDeferred<GenModels.DepartmentModel>;
        /**
         * Get departments by list of ids.
         *
         * @param departments Collection of staff departments
         */
        getStaffDepartments(departments: GenModels.CollectionRequestModelOf<string>, options?: RequestOptions): JQueryDeferred<Array<GenModels.DepartmentModel>>;
        /**
         * Get departments by list of ids.
         *
         * @param departments Collection of partner departments
         */
        getPartnerDepartments(departments: GenModels.CollectionRequestModelOf<string>, options?: RequestOptions): JQueryDeferred<Array<GenModels.DepartmentModel>>;
        /**
         * /api/Department/MarkPartnersCompanyTypeAsDepartment?partnerCompanyId=GUID
         */
        markPartnersCompanyTypeAsDepartment(partnerCompanyId: string, options?: RequestOptions): JQueryDeferred<void>;
        /**
         * Returns parent departments
         */
        getParentDepartments(departmentId: string, options?: RequestOptions): JQueryDeferred<Array<GenModels.DepartmentModel>>;
    }
    class DepartmentController extends BaseController implements IDepartmentController {
        getStaffDepartment(departmentId: string, options?: RequestOptions): JQueryDeferred<GenModels.DepartmentModel>;
        getPartnerDepartment(departmentId: string, options?: RequestOptions): JQueryDeferred<GenModels.DepartmentModel>;
        getStaffDepartments(departments: GenModels.CollectionRequestModelOf<string>, options?: RequestOptions): JQueryDeferred<Array<GenModels.DepartmentModel>>;
        getPartnerDepartments(departments: GenModels.CollectionRequestModelOf<string>, options?: RequestOptions): JQueryDeferred<Array<GenModels.DepartmentModel>>;
        markPartnersCompanyTypeAsDepartment(partnerCompanyId: string, options?: RequestOptions): JQueryDeferred<void>;
        getParentDepartments(departmentId: string, options?: RequestOptions): JQueryDeferred<Array<GenModels.DepartmentModel>>;
    }
}
export declare type $DepartmentController = {
    departmentController: GenControllers.IDepartmentController;
};
export declare const $DepartmentController: string | ((model?: $DepartmentController) => GenControllers.IDepartmentController);
export declare namespace GenControllers {
    /**
     * Directory designer row controller
     */
    interface IDirectoryDesignerRowController {
        /**
         * Get directory designer row by id
         *
         * @param rowId Directory designer row identifier
         */
        getDirectoryDesignerRow(rowId: string, options?: RequestOptions): JQueryDeferred<GenModels.DirectoryDesignerRowModel>;
        /**
         * Get directory designer rows by list of ids.
         *
         * @param rows
         *
         * @returns Collection of directory designer rows
         */
        getDirectoryDesignerRows(rows: GenModels.CollectionRequestModelOf<string>, options?: RequestOptions): JQueryDeferred<Array<GenModels.DirectoryDesignerRowModel>>;
    }
    class DirectoryDesignerRowController extends BaseController implements IDirectoryDesignerRowController {
        getDirectoryDesignerRow(rowId: string, options?: RequestOptions): JQueryDeferred<GenModels.DirectoryDesignerRowModel>;
        getDirectoryDesignerRows(rows: GenModels.CollectionRequestModelOf<string>, options?: RequestOptions): JQueryDeferred<Array<GenModels.DirectoryDesignerRowModel>>;
    }
}
export declare type $DirectoryDesignerRowController = {
    directoryDesignerRowController: GenControllers.IDirectoryDesignerRowController;
};
export declare const $DirectoryDesignerRowController: string | ((model?: $DirectoryDesignerRowController) => GenControllers.IDirectoryDesignerRowController);
export declare namespace GenControllers {
    /**
     * Employee controller
     */
    interface IContractsController {
        /**
         * Get contract info
         *
         * @param contractCardId Contract card identifier
         */
        getContractInfo(contractCardId: string, options?: RequestOptions): JQueryDeferred<GenModels.ContractInfoModel>;
        /**
         * Get contract dates
         *
         * @param contractCardId Contract card identifier
         */
        getContractDates(contractCardId: string, options?: RequestOptions): JQueryDeferred<GenModels.ContractDatesModel>;
        /**
         * Attach supplement to contract
         */
        prolongateContract(request: GenModels.ProlongateContractRequestModel, options?: RequestOptions): JQueryDeferred<void>;
        /**
         * Fill agreement fields on contract decision.
         */
        fillContractAgreementDates(request: GenModels.ContractAgreementFillDatesModel, options?: RequestOptions): JQueryDeferred<void>;
        /**
         * Fill agreement fields on contract decision.
         */
        fillContractDate(request: GenModels.ContractFillDateModel, options?: RequestOptions): JQueryDeferred<void>;
    }
    class ContractsController extends BaseController implements IContractsController {
        getContractInfo(contractCardId: string, options?: RequestOptions): JQueryDeferred<GenModels.ContractInfoModel>;
        getContractDates(contractCardId: string, options?: RequestOptions): JQueryDeferred<GenModels.ContractDatesModel>;
        prolongateContract(request: GenModels.ProlongateContractRequestModel, options?: RequestOptions): JQueryDeferred<void>;
        fillContractAgreementDates(request: GenModels.ContractAgreementFillDatesModel, options?: RequestOptions): JQueryDeferred<void>;
        fillContractDate(request: GenModels.ContractFillDateModel, options?: RequestOptions): JQueryDeferred<void>;
    }
}
export declare type $ContractsController = {
    contractsController: GenControllers.IContractsController;
};
export declare const $ContractsController: string | ((model?: $ContractsController) => GenControllers.IContractsController);
export declare namespace GenControllers {
    /**
     * Employee controller
     */
    interface IEmployeeController {
        /**
         * Get staff employee by id
         *
         * @param employeeId Employee identifier
         *
         * @returns Staff employee
         */
        getEmployee(employeeId: string, options?: RequestOptions): JQueryDeferred<GenModels.EmployeeDataModel>;
        /**
         * Get employees by list of ids.
         *
         * @param employees
         *
         * @returns Collection of employees
         */
        getEmployees(employees: GenModels.CollectionRequestModelOf<string>, options?: RequestOptions): JQueryDeferred<Array<GenModels.EmployeeDataModel>>;
    }
    class EmployeeController extends BaseController implements IEmployeeController {
        getEmployee(employeeId: string, options?: RequestOptions): JQueryDeferred<GenModels.EmployeeDataModel>;
        getEmployees(employees: GenModels.CollectionRequestModelOf<string>, options?: RequestOptions): JQueryDeferred<Array<GenModels.EmployeeDataModel>>;
    }
}
export declare type $EmployeeController = {
    employeeController: GenControllers.IEmployeeController;
};
export declare const $EmployeeController: string | ((model?: $EmployeeController) => GenControllers.IEmployeeController);
export declare namespace GenControllers {
    /**
     * Business calendar controller
     */
    interface IBusinessCalendarController {
        /**
         * Get work-time settings
         *
         * @param requestModel Request model
         */
        getWorkTimeSettings(requestModel: GenModels.CalendarRequestModel, options?: RequestOptions): JQueryDeferred<Array<GenModels.CalendarYearSettings>>;
        /**
         * Get duration
         *
         * @param requestModel Request model
         */
        getDuration(requestModel: GenModels.CalendarDurationRequestModel, options?: RequestOptions): JQueryDeferred<number>;
        /**
         * Get start date
         *
         * @param requestModel Request model
         */
        getStartDate(requestModel: GenModels.CalendarStartDateRequestModel, options?: RequestOptions): JQueryDeferred<string>;
        /**
         * Get end date
         *
         * @param requestModel Request model
         */
        getEndDate(requestModel: GenModels.CalendarEndDateRequestModel, options?: RequestOptions): JQueryDeferred<string>;
        /**
         * Calculate start/end dates of task group intervals, based on the specified durations.
         *
         * @param requestModel Request model
         */
        calculateIntervalsDates(requestModel: GenModels.IntervalsCalculationRequestModel, options?: RequestOptions): JQueryDeferred<Array<GenModels.TaskGroupInterval>>;
    }
    class BusinessCalendarController extends BaseController implements IBusinessCalendarController {
        getWorkTimeSettings(requestModel: GenModels.CalendarRequestModel, options?: RequestOptions): JQueryDeferred<Array<GenModels.CalendarYearSettings>>;
        getDuration(requestModel: GenModels.CalendarDurationRequestModel, options?: RequestOptions): JQueryDeferred<number>;
        getStartDate(requestModel: GenModels.CalendarStartDateRequestModel, options?: RequestOptions): JQueryDeferred<string>;
        getEndDate(requestModel: GenModels.CalendarEndDateRequestModel, options?: RequestOptions): JQueryDeferred<string>;
        calculateIntervalsDates(requestModel: GenModels.IntervalsCalculationRequestModel, options?: RequestOptions): JQueryDeferred<Array<GenModels.TaskGroupInterval>>;
    }
}
export declare type $BusinessCalendarController = {
    businessCalendarController: GenControllers.IBusinessCalendarController;
};
export declare const $BusinessCalendarController: string | ((model?: $BusinessCalendarController) => GenControllers.IBusinessCalendarController);
export declare namespace GenControllers {
    /**
     * Comments controller
     */
    interface ICommentsController {
        /**
         * Get comments
         *
         * @param requestModel Request model
         */
        getComments(requestModel: GenModels.CommentsRequestModel, options?: RequestOptions): JQueryDeferred<GenModels.CommentsModel>;
        /**
         * Add comment
         *
         * @param requestModel Request model
         */
        addComment(requestModel: GenModels.AddCommentRequestModel, options?: RequestOptions): JQueryDeferred<void>;
        /**
         * Restore comment
         *
         * @param requestModel Request model
         */
        restoreComment(requestModel: GenModels.RestoreCommentModel, options?: RequestOptions): JQueryDeferred<void>;
        /**
         * Update comment
         *
         * @param requestModel Request model
         */
        updateComment(requestModel: GenModels.UpdateCommentRequestModel, options?: RequestOptions): JQueryDeferred<void>;
        /**
         * Delete comment
         *
         * @param requestModel Request model
         */
        deleteComment(requestModel: GenModels.DeleteCommentRequestModel, options?: RequestOptions): JQueryDeferred<GenModels.RestoreCommentModel>;
    }
    class CommentsController extends BaseController implements ICommentsController {
        getComments(requestModel: GenModels.CommentsRequestModel, options?: RequestOptions): JQueryDeferred<GenModels.CommentsModel>;
        addComment(requestModel: GenModels.AddCommentRequestModel, options?: RequestOptions): JQueryDeferred<void>;
        restoreComment(requestModel: GenModels.RestoreCommentModel, options?: RequestOptions): JQueryDeferred<void>;
        updateComment(requestModel: GenModels.UpdateCommentRequestModel, options?: RequestOptions): JQueryDeferred<void>;
        deleteComment(requestModel: GenModels.DeleteCommentRequestModel, options?: RequestOptions): JQueryDeferred<GenModels.RestoreCommentModel>;
    }
}
export declare type $CommentsController = {
    commentsController: GenControllers.ICommentsController;
};
export declare const $CommentsController: string | ((model?: $CommentsController) => GenControllers.ICommentsController);
export declare namespace GenControllers {
    /**
     * Partner employee controller
     */
    interface IPartnerEmployeeController {
        /**
         * Get partner employee by id
         *
         * @param employeeId
         *
         * @returns Partner employee
         */
        getPartnerEmployee(employeeId: string, options?: RequestOptions): JQueryDeferred<GenModels.EmployeeDataModel>;
        /**
         * Get employees by list of ids.
         *
         * @param employees
         *
         * @returns Collection of employees
         */
        getPartnerEmployees(employees: GenModels.CollectionRequestModel, options?: RequestOptions): JQueryDeferred<Array<GenModels.EmployeeDataModel>>;
    }
    class PartnerEmployeeController extends BaseController implements IPartnerEmployeeController {
        getPartnerEmployee(employeeId: string, options?: RequestOptions): JQueryDeferred<GenModels.EmployeeDataModel>;
        getPartnerEmployees(employees: GenModels.CollectionRequestModel, options?: RequestOptions): JQueryDeferred<Array<GenModels.EmployeeDataModel>>;
    }
}
export declare type $PartnerEmployeeController = {
    partnerEmployeeController: GenControllers.IPartnerEmployeeController;
};
export declare const $PartnerEmployeeController: string | ((model?: $PartnerEmployeeController) => GenControllers.IPartnerEmployeeController);
export declare namespace GenControllers {
    /**
     * Signature controller
     */
    interface ISignatureController {
        /**
         * Gets available signature kind depends on certificate, settings, etc
         *
         * @param certEncoded certificate
         *
         * @returns JSON representation of {@link GenModels}
         */
        getSignatureKind(certEncoded: string, options?: RequestOptions): JQueryDeferred<GenModels.SignatureKindSelectionModel>;
        /**
         * Check if document has valid signature
         *
         * @param cardId document id
         *
         * @returns JSON representation of {@link GenModels}
         */
        hasValidSignature(cardId: string, options?: RequestOptions): JQueryDeferred<boolean>;
    }
    class SignatureController extends BaseController implements ISignatureController {
        getSignatureKind(certEncoded: string, options?: RequestOptions): JQueryDeferred<GenModels.SignatureKindSelectionModel>;
        hasValidSignature(cardId: string, options?: RequestOptions): JQueryDeferred<boolean>;
    }
}
export declare type $SignatureController = {
    signatureController: GenControllers.ISignatureController;
};
export declare const $SignatureController: string | ((model?: $SignatureController) => GenControllers.ISignatureController);
export declare namespace GenControllers {
    /**
     * Application settings controller
     */
    interface IApplicationSettingsController {
        /**
         * /Api/System/GetApplicationSettings
         */
        get(options?: RequestOptions): JQueryDeferred<any>;
    }
    class ApplicationSettingsController extends BaseController implements IApplicationSettingsController {
        get(options?: RequestOptions): JQueryDeferred<any>;
    }
}
export declare type $ApplicationSettingsController = {
    applicationSettingsController: GenControllers.IApplicationSettingsController;
};
export declare const $ApplicationSettingsController: string | ((model?: $ApplicationSettingsController) => GenControllers.IApplicationSettingsController);
export declare namespace GenControllers {
    /**
     * Defines abstract class for file upload web api controllers
     */
    interface IFileUploadApiControllerBase {
    }
    abstract class FileUploadApiControllerBase extends BaseController implements IFileUploadApiControllerBase {
    }
}
export declare type $FileUploadApiControllerBase = {
    fileUploadApiControllerBase: GenControllers.IFileUploadApiControllerBase;
};
export declare const $FileUploadApiControllerBase: string | ((model?: $FileUploadApiControllerBase) => GenControllers.IFileUploadApiControllerBase);
export declare namespace GenControllers {
    /**
     * Defines abstract class for file upload web api controllers
     */
    interface IFileUploadApiController {
    }
    abstract class FileUploadApiController extends GenControllers.FileUploadApiControllerBase implements IFileUploadApiController {
    }
}
export declare type $FileUploadApiController = {
    fileUploadApiController: GenControllers.IFileUploadApiController;
};
export declare const $FileUploadApiController: string | ((model?: $FileUploadApiController) => GenControllers.IFileUploadApiController);
export declare namespace GenControllers {
    /**
     * Task card controller
     */
    interface ITaskCardController {
        /**
         * /api/TaskCard/GetMergeGroupModels
         */
        getMergeGroupModels(cardId: string, options?: RequestOptions): JQueryDeferred<Array<GenModels.MergeGroupModel>>;
        /**
         * /api/TaskCard/SetMergedFileAsync
         */
        setMergedFileAsync(options?: RequestOptions): JQueryDeferred<any>;
        /**
         * /api/TaskCard/MergeDone
         */
        mergeDone(cardId: string, options?: RequestOptions): JQueryDeferred<any>;
    }
    class TaskCardController extends GenControllers.FileUploadApiController implements ITaskCardController {
        getMergeGroupModels(cardId: string, options?: RequestOptions): JQueryDeferred<Array<GenModels.MergeGroupModel>>;
        setMergedFileAsync(options?: RequestOptions): JQueryDeferred<any>;
        mergeDone(cardId: string, options?: RequestOptions): JQueryDeferred<any>;
    }
}
export declare type $TaskCardController = {
    taskCardController: GenControllers.ITaskCardController;
};
export declare const $TaskCardController: string | ((model?: $TaskCardController) => GenControllers.ITaskCardController);
export declare namespace GenControllers {
    /**
     * Task group controller
     */
    interface ITaskGroupController {
        /**
         * Return {@link GenModels} of a parent card for Tasks control placed in TaskGroup card
         * /api/TaskGroup/GetParentCardTasksDataModel
         */
        getParentCardTasksDataModel(groupTaskId: string, options?: RequestOptions): JQueryDeferred<GenModels.TasksDataModel>;
    }
    class TaskGroupController extends BaseController implements ITaskGroupController {
        getParentCardTasksDataModel(groupTaskId: string, options?: RequestOptions): JQueryDeferred<GenModels.TasksDataModel>;
    }
}
export declare type $TaskGroupController = {
    taskGroupController: GenControllers.ITaskGroupController;
};
export declare const $TaskGroupController: string | ((model?: $TaskGroupController) => GenControllers.ITaskGroupController);
export declare namespace GenControllers {
    /**
     * Tasks tree controller
     */
    interface ITasksTreeController {
        /**
         * Get tasks tree
         *
         * @param requestModel Request model
         *
         * @returns Tasks tree
         */
        get(requestModel: GenModels.TasksTreeRequestModel, options?: RequestOptions): JQueryDeferred<GenModels.TasksTreeModel>;
        /**
         * Get tasks tree
         *
         * @param requestModel Request model
         *
         * @returns Tasks tree
         */
        getTasksTable(requestModel: GenModels.TasksTableLoadOptions, options?: RequestOptions): JQueryDeferred<GenModels.TasksTableModel>;
        /**
         * Get help model for node
         *
         * @param requestModel Request model
         *
         * @returns Help model for node
         */
        getNodeHelpModel(requestModel: GenModels.TasksTreeNodeHelpRequestModel, options?: RequestOptions): JQueryDeferred<GenModels.TreeNodeHelpModel>;
    }
    class TasksTreeController extends BaseController implements ITasksTreeController {
        get(requestModel: GenModels.TasksTreeRequestModel, options?: RequestOptions): JQueryDeferred<GenModels.TasksTreeModel>;
        getTasksTable(requestModel: GenModels.TasksTableLoadOptions, options?: RequestOptions): JQueryDeferred<GenModels.TasksTableModel>;
        getNodeHelpModel(requestModel: GenModels.TasksTreeNodeHelpRequestModel, options?: RequestOptions): JQueryDeferred<GenModels.TreeNodeHelpModel>;
    }
}
export declare type $TasksTreeController = {
    tasksTreeController: GenControllers.ITasksTreeController;
};
export declare const $TasksTreeController: string | ((model?: $TasksTreeController) => GenControllers.ITasksTreeController);
export declare namespace GenControllers {
    /**
     * Layout partner controller
     */
    interface ILayoutPartnerController {
        /**
         * find department by name
         *
         * @param query search string
         */
        quickSearch(query: GenModels.PartnerQuickSearchQuery, options?: RequestOptions): JQueryDeferred<GenModels.PartnerQuickSearchResponse>;
        /**
         * find department by name
         *
         * @param query search string
         */
        loadTree(query: GenModels.PartnerLoadQuery, options?: RequestOptions): JQueryDeferred<GenModels.PartnerTreeLoadResponse>;
        /**
         * find department by name
         *
         * @param query search string
         */
        directorySearch(query: GenModels.PartnerQuickSearchQuery, options?: RequestOptions): JQueryDeferred<GenModels.PartnerSearchResponse>;
    }
    class LayoutPartnerController extends BaseController implements ILayoutPartnerController {
        quickSearch(query: GenModels.PartnerQuickSearchQuery, options?: RequestOptions): JQueryDeferred<GenModels.PartnerQuickSearchResponse>;
        loadTree(query: GenModels.PartnerLoadQuery, options?: RequestOptions): JQueryDeferred<GenModels.PartnerTreeLoadResponse>;
        directorySearch(query: GenModels.PartnerQuickSearchQuery, options?: RequestOptions): JQueryDeferred<GenModels.PartnerSearchResponse>;
    }
}
export declare type $LayoutPartnerController = {
    layoutPartnerController: GenControllers.ILayoutPartnerController;
};
export declare const $LayoutPartnerController: string | ((model?: $LayoutPartnerController) => GenControllers.ILayoutPartnerController);
export declare namespace GenControllers {
    /**
     * Controller for user settings of layout
     */
    interface ILayoutUserSettingsController {
        /**
         * Get settings for main menu
         */
        getMainMenuSettings(options?: RequestOptions): JQueryDeferred<GenModels.MainMenuSettings>;
        /**
         * Save settings for main menu
         *
         * @param settings Request model
         */
        saveMainMenuSettings(settings: GenModels.MainMenuSettings, options?: RequestOptions): JQueryDeferred<void>;
    }
    class LayoutUserSettingsController extends BaseController implements ILayoutUserSettingsController {
        getMainMenuSettings(options?: RequestOptions): JQueryDeferred<GenModels.MainMenuSettings>;
        saveMainMenuSettings(settings: GenModels.MainMenuSettings, options?: RequestOptions): JQueryDeferred<void>;
    }
}
export declare type $LayoutUserSettingsController = {
    layoutUserSettingsController: GenControllers.ILayoutUserSettingsController;
};
export declare const $LayoutUserSettingsController: string | ((model?: $LayoutUserSettingsController) => GenControllers.ILayoutUserSettingsController);
export declare namespace GenControllers {
    /**
     * Pages controller
     */
    interface IPagesController {
        /**
         * Get recent cards
         *
         * @param requestModel Request model
         *
         * @returns Model with list of recent cards
         */
        recentCards(requestModel: GenModels.CardListRequestModel, options?: RequestOptions): JQueryDeferred<GenModels.CardListViewModel>;
    }
    class PagesController extends BaseController implements IPagesController {
        recentCards(requestModel: GenModels.CardListRequestModel, options?: RequestOptions): JQueryDeferred<GenModels.CardListViewModel>;
    }
}
export declare type $PagesController = {
    pagesController: GenControllers.IPagesController;
};
export declare const $PagesController: string | ((model?: $PagesController) => GenControllers.IPagesController);
export declare namespace GenControllers {
    /**
     * Grid controller
     */
    interface IGridController {
        /**
         * Get card list
         *
         * TODO: make http get
         *
         * @param requestModel Request model
         */
        getCardList(requestModel: GenModels.CardListRequestModel, options?: RequestOptions): JQueryDeferred<GenModels.CardListViewModel>;
        /**
         * Get grid filter layout model
         *
         * @param requestModel Request model
         */
        getFilter(requestModel: GenModels.GridFilterRequestModel, options?: RequestOptions): JQueryDeferred<GenModels.LayoutViewModel>;
        /**
         * Get grid data
         *
         * @param requestModel Request model
         *
         * @returns Grid data
         */
        getGridData(requestModel: GenModels.CardListRequestModel, options?: RequestOptions): JQueryDeferred<GenModels.GridViewModel>;
        /**
         * Get grid data silently
         *
         * @param requestModel Request model
         *
         * @returns Grid data
         */
        getGridDataSilent(requestModel: GenModels.CardListRequestModel, options?: RequestOptions): JQueryDeferred<GenModels.GridViewModel>;
        /**
         * Saves grid user settings data
         *
         * @param requestModel Request model
         *
         * @returns Returns CommonResponse
         */
        saveGridUserSettingsData(requestModel: GenModels.SaveGridUserSettingsDataRequestModel, options?: RequestOptions): JQueryDeferred<void>;
        /**
         * Saves grid user settings data
         *
         * @param requestModel Request model
         *
         * @returns Returns CommonResponse
         */
        saveGridUserSettingsFolderData(requestModel: GenModels.SaveGridUserSettingsFolderDataRequestModel, options?: RequestOptions): JQueryDeferred<void>;
    }
    class GridController extends BaseController implements IGridController {
        getCardList(requestModel: GenModels.CardListRequestModel, options?: RequestOptions): JQueryDeferred<GenModels.CardListViewModel>;
        getFilter(requestModel: GenModels.GridFilterRequestModel, options?: RequestOptions): JQueryDeferred<GenModels.LayoutViewModel>;
        getGridData(requestModel: GenModels.CardListRequestModel, options?: RequestOptions): JQueryDeferred<GenModels.GridViewModel>;
        getGridDataSilent(requestModel: GenModels.CardListRequestModel, options?: RequestOptions): JQueryDeferred<GenModels.GridViewModel>;
        saveGridUserSettingsData(requestModel: GenModels.SaveGridUserSettingsDataRequestModel, options?: RequestOptions): JQueryDeferred<void>;
        saveGridUserSettingsFolderData(requestModel: GenModels.SaveGridUserSettingsFolderDataRequestModel, options?: RequestOptions): JQueryDeferred<void>;
    }
}
export declare type $GridController = {
    gridController: GenControllers.IGridController;
};
export declare const $GridController: string | ((model?: $GridController) => GenControllers.IGridController);
export declare namespace GenControllers {
    /**
     * Layout controller
     */
    interface ILayoutController {
        /**
         * Get layout
         *
         * @param locationName Position name
         * @param cardId Card id
         *
         * @returns Layout model
         */
        get(locationName: string, cardId?: string, options?: RequestOptions): JQueryDeferred<GenModels.LayoutViewModel>;
        /**
         * Get layout
         */
        getWithParams(request: GenModels.GetPartRequestModel, options?: RequestOptions): JQueryDeferred<GenModels.LayoutViewModel>;
        /**
         * Get specified control info from whole layout
         *
         * @param locationName Position name
         * @param controlName Control name
         * @param cardId Card id
         *
         * @returns Layout model with control info
         */
        getPart(locationName: string, controlName: string, cardId?: string, options?: RequestOptions): JQueryDeferred<GenModels.LayoutViewModel>;
        /**
         * Get specified control info from whole layout
         *
         * @returns Layout model with control info
         */
        getPartWithParams(request: GenModels.GetPartRequestModel, options?: RequestOptions): JQueryDeferred<GenModels.LayoutViewModel>;
        /**
         * Get specified control info from whole layout
         *
         * @returns Layout model with control info
         */
        getPartWithParamsEx(request: GenModels.GetPartRequestModelEx, options?: RequestOptions): JQueryDeferred<GenModels.LayoutViewModel>;
        /**
         * Gets root layout
         */
        getRootLayout(location: string, cacheVary?: string, options?: RequestOptions): JQueryDeferred<any>;
    }
    class LayoutController extends BaseController implements ILayoutController {
        get(locationName: string, cardId?: string, options?: RequestOptions): JQueryDeferred<GenModels.LayoutViewModel>;
        getWithParams(request: GenModels.GetPartRequestModel, options?: RequestOptions): JQueryDeferred<GenModels.LayoutViewModel>;
        getPart(locationName: string, controlName: string, cardId?: string, options?: RequestOptions): JQueryDeferred<GenModels.LayoutViewModel>;
        getPartWithParams(request: GenModels.GetPartRequestModel, options?: RequestOptions): JQueryDeferred<GenModels.LayoutViewModel>;
        getPartWithParamsEx(request: GenModels.GetPartRequestModelEx, options?: RequestOptions): JQueryDeferred<GenModels.LayoutViewModel>;
        getRootLayout(location: string, cacheVary?: string, options?: RequestOptions): JQueryDeferred<any>;
    }
}
export declare type $LayoutController = {
    layoutController: GenControllers.ILayoutController;
};
export declare const $LayoutController: string | ((model?: $LayoutController) => GenControllers.ILayoutController);
export declare namespace GenControllers {
    /**
     * Layout history controller
     */
    interface ILayoutHistoryController {
        /**
         * Get history records
         *
         * @param query search string
         */
        getHistoryRecords(query: GenModels.HistorySearchQuery, options?: RequestOptions): JQueryDeferred<GenModels.HistorySearchResult>;
    }
    class LayoutHistoryController extends BaseController implements ILayoutHistoryController {
        getHistoryRecords(query: GenModels.HistorySearchQuery, options?: RequestOptions): JQueryDeferred<GenModels.HistorySearchResult>;
    }
}
export declare type $LayoutHistoryController = {
    layoutHistoryController: GenControllers.ILayoutHistoryController;
};
export declare const $LayoutHistoryController: string | ((model?: $LayoutHistoryController) => GenControllers.ILayoutHistoryController);
export declare namespace GenControllers {
    /**
     * Layout file controller
     */
    interface IFilePickerController {
        /**
         * POST: /FilePicker/AddFiles
         */
        createFile(options?: RequestOptions): JQueryDeferred<any>;
        /**
         * POST: /FilePicker/AddFileVersion
         */
        addFileVersion(options?: RequestOptions): JQueryDeferred<any>;
        /**
         * POST: /FilePicker/ReplaceFile
         */
        replaceFile(options?: RequestOptions): JQueryDeferred<any>;
        /**
         * POST: /FilePicker/GetFile
         */
        getFile(request: GenModels.FilePickerGetFileRequestModel, options?: RequestOptions): JQueryDeferred<GenModels.FileCardModel>;
        /**
         * POST: /FilePicker/GetFile
         */
        prepareFileDownload(request: GenModels.FilePickerRequestModel, options?: RequestOptions): JQueryDeferred<void>;
    }
    class FilePickerController extends GenControllers.FileUploadApiControllerBase implements IFilePickerController {
        createFile(options?: RequestOptions): JQueryDeferred<any>;
        addFileVersion(options?: RequestOptions): JQueryDeferred<any>;
        replaceFile(options?: RequestOptions): JQueryDeferred<any>;
        getFile(request: GenModels.FilePickerGetFileRequestModel, options?: RequestOptions): JQueryDeferred<GenModels.FileCardModel>;
        prepareFileDownload(request: GenModels.FilePickerRequestModel, options?: RequestOptions): JQueryDeferred<void>;
    }
}
export declare type $FilePickerController = {
    filePickerController: GenControllers.IFilePickerController;
};
export declare const $FilePickerController: string | ((model?: $FilePickerController) => GenControllers.IFilePickerController);
export declare namespace GenControllers {
    /**
     * Layout row controller
     */
    interface ILayoutRowController {
        /**
         * HTTP: /LayoutRow/NewRow
         */
        newRow(createParams: GenModels.LayoutRowCreateParams, options?: RequestOptions): JQueryDeferred<GenModels.LayoutRowViewModel>;
        /**
         * HTTP: /LayoutRow/View
         */
        view(layoutParams: GenModels.RowLayoutParams, options?: RequestOptions): JQueryDeferred<GenModels.LayoutRowViewModel>;
        /**
         * HTTP: /LayoutRow/Edit
         */
        edit(layoutParams: GenModels.RowLayoutParams, options?: RequestOptions): JQueryDeferred<GenModels.LayoutRowViewModel>;
        /**
         * HTTP: /LayoutRow/Delete
         */
        delete(row: GenModels.DeleteRowModel, options?: RequestOptions): JQueryDeferred<void>;
        /**
         * Gets layout part
         */
        getLayoutPart(layoutPartParams: GenModels.RowLayoutPartParams, options?: RequestOptions): JQueryDeferred<GenModels.LayoutModel>;
        /**
         * HTTP: /LayoutRow/Save
         */
        save(model: GenModels.SaveRowControlDataModel, options?: RequestOptions): JQueryDeferred<void>;
        /**
         * HTTP: /LayoutRow/CheckModifiedAndLocked
         */
        checkModifiedAndLocked(cardId: string, sectionId: string, rowId: string, timestamp: number, options?: RequestOptions): JQueryDeferred<void>;
        /**
         * HTTP: /LayoutRow/CheckAccess
         */
        checkAccess(cardId: string, sectionId: string, rowId: string, options?: RequestOptions): JQueryDeferred<boolean>;
    }
    class LayoutRowController extends BaseController implements ILayoutRowController {
        newRow(createParams: GenModels.LayoutRowCreateParams, options?: RequestOptions): JQueryDeferred<GenModels.LayoutRowViewModel>;
        view(layoutParams: GenModels.RowLayoutParams, options?: RequestOptions): JQueryDeferred<GenModels.LayoutRowViewModel>;
        edit(layoutParams: GenModels.RowLayoutParams, options?: RequestOptions): JQueryDeferred<GenModels.LayoutRowViewModel>;
        delete(row: GenModels.DeleteRowModel, options?: RequestOptions): JQueryDeferred<void>;
        getLayoutPart(layoutPartParams: GenModels.RowLayoutPartParams, options?: RequestOptions): JQueryDeferred<GenModels.LayoutModel>;
        save(model: GenModels.SaveRowControlDataModel, options?: RequestOptions): JQueryDeferred<void>;
        checkModifiedAndLocked(cardId: string, sectionId: string, rowId: string, timestamp: number, options?: RequestOptions): JQueryDeferred<void>;
        checkAccess(cardId: string, sectionId: string, rowId: string, options?: RequestOptions): JQueryDeferred<boolean>;
    }
}
export declare type $LayoutRowController = {
    layoutRowController: GenControllers.ILayoutRowController;
};
export declare const $LayoutRowController: string | ((model?: $LayoutRowController) => GenControllers.ILayoutRowController);
export declare namespace GenControllers {
    /**
     * Layout card kind controller
     */
    interface ILayoutCardKindController {
        /**
         * Load kinds tree
         */
        loadTree(options?: RequestOptions): JQueryDeferred<Array<GenModels.CardKindInfoModel>>;
    }
    class LayoutCardKindController extends BaseController implements ILayoutCardKindController {
        loadTree(options?: RequestOptions): JQueryDeferred<Array<GenModels.CardKindInfoModel>>;
    }
}
export declare type $LayoutCardKindController = {
    layoutCardKindController: GenControllers.ILayoutCardKindController;
};
export declare const $LayoutCardKindController: string | ((model?: $LayoutCardKindController) => GenControllers.ILayoutCardKindController);
export declare namespace GenControllers {
    /**
     * Processing JavaScript errors, warnings and information messages and writing them to server logs.
     */
    interface IClientLogController {
        /**
         * Add message to server log.
         */
        logMessage(message: GenModels.ClientLogMessage, options?: RequestOptions): JQueryDeferred<void>;
    }
    class ClientLogController extends BaseController implements IClientLogController {
        logMessage(message: GenModels.ClientLogMessage, options?: RequestOptions): JQueryDeferred<void>;
    }
}
export declare type $ClientLogController = {
    clientLogController: GenControllers.IClientLogController;
};
export declare const $ClientLogController: string | ((model?: $ClientLogController) => GenControllers.IClientLogController);
export declare namespace GenControllers {
    /**
     * Card types controller
     */
    interface ICardTypesController {
        /**
         * Gets card types
         */
        get(options?: RequestOptions): JQueryDeferred<any>;
    }
    class CardTypesController extends BaseController implements ICardTypesController {
        get(options?: RequestOptions): JQueryDeferred<any>;
    }
}
export declare type $CardTypesController = {
    cardTypesController: GenControllers.ICardTypesController;
};
export declare const $CardTypesController: string | ((model?: $CardTypesController) => GenControllers.ICardTypesController);
export declare namespace GenControllers {
    /**
     * Layout controller for staff directory
     */
    interface IStaffDirectoryItemsController {
        /**
         * Find department by name
         *
         * @param query Search string
         */
        loadStaffData(query: GenModels.StaffQuery, options?: RequestOptions): JQueryDeferred<GenModels.StaffLoadResponse>;
        /**
         * Save favorites
         */
        addToFavorites(query: GenModels.AddToFavoritesQuery, options?: RequestOptions): JQueryDeferred<void>;
    }
    class StaffDirectoryItemsController extends BaseController implements IStaffDirectoryItemsController {
        loadStaffData(query: GenModels.StaffQuery, options?: RequestOptions): JQueryDeferred<GenModels.StaffLoadResponse>;
        addToFavorites(query: GenModels.AddToFavoritesQuery, options?: RequestOptions): JQueryDeferred<void>;
    }
}
export declare type $StaffDirectoryItemsController = {
    staffDirectoryItemsController: GenControllers.IStaffDirectoryItemsController;
};
export declare const $StaffDirectoryItemsController: string | ((model?: $StaffDirectoryItemsController) => GenControllers.IStaffDirectoryItemsController);
export declare namespace GenControllers {
    /**
     * Layout tasks controller
     */
    interface ILayoutTasksController {
        /**
         * GET: /LayoutTasks/GetTasks
         */
        getTaskList(request: GenModels.GetTasksListRequestModel, options?: RequestOptions): JQueryDeferred<Array<GenModels.TaskDataModel>>;
        /**
         * Get tasks by specified card id
         *
         * @param cardId Card id
         * @param availableKinds List of available kinds ids
         */
        getTasks(cardId: string, availableKinds: Array<string>, options?: RequestOptions): JQueryDeferred<Array<GenModels.TaskDataModel>>;
        /**
         * GET: /LayoutTasks/GetChildTasksComments
         */
        getChildTasksComments(request: GenModels.GetChildTasksCommentsRequestModel, options?: RequestOptions): JQueryDeferred<GenModels.GetChildTasksCommentsResponseModel>;
        /**
         * GET: /LayoutTasks/GetChildTasksComments
         */
        addTaskComments(request: GenModels.AddTaskCommentsRequestModel, options?: RequestOptions): JQueryDeferred<void>;
        /**
         * POST: /LayoutTasks/CreateChildTasks
         */
        createChildTasks(request: GenModels.CreateChildTasksRequestModel, options?: RequestOptions): JQueryDeferred<void>;
        /**
         * GET: /LayoutTasks/GetChildTasksDefaultValues
         */
        getChildTasksDefaultValues(parentTaskId: string, options?: RequestOptions): JQueryDeferred<GenModels.ChildTaskCreateDefaultValues>;
        /**
         * POST: /LayoutTasks/GetDelegateRecords
         *
         * @param request Request model
         */
        getDelegationRecords(request: GenModels.GetDelegationRecordsRequestModel, options?: RequestOptions): JQueryDeferred<GenModels.DelegateRecordsResponse>;
        /**
         * HTTP: /TaskCard/Delegate
         *
         * @returns Task digest
         */
        delegate(model: GenModels.TaskCardDelegateRequestModel, options?: RequestOptions): JQueryDeferred<string>;
    }
    class LayoutTasksController extends BaseController implements ILayoutTasksController {
        getTaskList(request: GenModels.GetTasksListRequestModel, options?: RequestOptions): JQueryDeferred<Array<GenModels.TaskDataModel>>;
        getTasks(cardId: string, availableKinds: Array<string>, options?: RequestOptions): JQueryDeferred<Array<GenModels.TaskDataModel>>;
        getChildTasksComments(request: GenModels.GetChildTasksCommentsRequestModel, options?: RequestOptions): JQueryDeferred<GenModels.GetChildTasksCommentsResponseModel>;
        addTaskComments(request: GenModels.AddTaskCommentsRequestModel, options?: RequestOptions): JQueryDeferred<void>;
        createChildTasks(request: GenModels.CreateChildTasksRequestModel, options?: RequestOptions): JQueryDeferred<void>;
        getChildTasksDefaultValues(parentTaskId: string, options?: RequestOptions): JQueryDeferred<GenModels.ChildTaskCreateDefaultValues>;
        getDelegationRecords(request: GenModels.GetDelegationRecordsRequestModel, options?: RequestOptions): JQueryDeferred<GenModels.DelegateRecordsResponse>;
        delegate(model: GenModels.TaskCardDelegateRequestModel, options?: RequestOptions): JQueryDeferred<string>;
    }
}
export declare type $LayoutTasksController = {
    layoutTasksController: GenControllers.ILayoutTasksController;
};
export declare const $LayoutTasksController: string | ((model?: $LayoutTasksController) => GenControllers.ILayoutTasksController);
export declare namespace GenControllers {
    /**
     * Layout file controller
     */
    interface ILayoutAgreementController {
        /**
         * Get agreement list
         *
         * @param cardId Card id
         *
         * @returns JSON representation of {@link GenModels}
         */
        getAgreementList(cardId: string, options?: RequestOptions): JQueryDeferred<GenModels.AgreementListModel>;
        /**
         * Get model for AgreementManagement control
         *
         * @param cardId Document card id
         *
         * @returns JSON representation of {@link GenModels}
         */
        getAgreementManagementModel(cardId: string, options?: RequestOptions): JQueryDeferred<GenModels.LayoutAgreementManagementModel>;
        /**
         * Gets model for the start agreement in AgreementManagementControl
         *
         * @param documentCardId Document card id
         *
         * @returns JSON representation of {@link GenModels}
         */
        getAgreementManagementStartModel(documentCardId: string, options?: RequestOptions): JQueryDeferred<GenModels.AgreementManagementStartModel>;
        /**
         * Gets model for the edit agreement in AgreementManagementControl
         *
         * @param documentCardId Document card id
         * @param reconcileCardId Reconcile card id
         *
         * @returns JSON representation of {@link GenModels}
         */
        getAgreementManagementEditModel(documentCardId: string, reconcileCardId: string, options?: RequestOptions): JQueryDeferred<GenModels.AgreementManagementEditModel>;
        /**
         * Gets template stages AgreementManagementControl
         *
         * @param documentId Document id
         * @param templateId Template id
         *
         * @returns JSON representation of {@link GenModels}
         */
        getAgreementTemplateStages(documentId: string, templateId: string, options?: RequestOptions): JQueryDeferred<Array<GenModels.StageModel>>;
        /**
         * Create Reconciliation
         *
         * @param model Reconcilation creation model
         *
         * @returns JSON representation of {@link GenModels}
         */
        createReconciliation(model: GenModels.ReconcilationCreationModel, options?: RequestOptions): JQueryDeferred<string>;
        /**
         * Create Reconciliation
         *
         * @param model Reconcilation edit model
         *
         * @returns JSON representation of {@link GenModels}
         */
        changeStages(model: GenModels.ReconcilationEditModel, options?: RequestOptions): JQueryDeferred<void>;
        /**
         * Interrupt current stages
         *
         * @param documentCardId Document card id
         * @param reconcileCardId Reconcile card id
         *
         * @returns JSON representation of {@link GenModels}
         */
        interruptCurrentStages(documentCardId: string, reconcileCardId: string, options?: RequestOptions): JQueryDeferred<void>;
        /**
         * Stop agreement
         *
         * @param documentCardId Document card id
         * @param reconcileCardId Reconcile card id
         *
         * @returns JSON representation of {@link GenModels}
         */
        agreementStop(documentCardId: string, reconcileCardId: string, options?: RequestOptions): JQueryDeferred<void>;
        /**
         * Finish agreement
         *
         * @param documentCardId Document card id
         * @param reconcileCardId Reconcile card id
         *
         * @returns JSON representation of {@link GenModels}
         */
        agreementFinish(documentCardId: string, reconcileCardId: string, options?: RequestOptions): JQueryDeferred<void>;
        /**
         * Pause agreement
         *
         * @param documentCardId Document card id
         * @param reconcileCardId Reconcile card id
         *
         * @returns JSON representation of {@link GenModels}
         */
        agreementPause(documentCardId: string, reconcileCardId: string, options?: RequestOptions): JQueryDeferred<void>;
        /**
         * Resume agreement
         *
         * @param documentCardId Document card id
         * @param reconcileCardId Reconcile card id
         *
         * @returns JSON representation of {@link GenModels}
         */
        agreementResume(documentCardId: string, reconcileCardId: string, options?: RequestOptions): JQueryDeferred<void>;
        /**
         * Get agreement history
         *
         * @param reconcileCardId Reconcile card id
         *
         * @returns JSON representation of {@link GenModels}
         */
        getAgreementHistory(reconcileCardId: string, options?: RequestOptions): JQueryDeferred<GenModels.ApprovalHistoryViewModel>;
    }
    class LayoutAgreementController extends BaseController implements ILayoutAgreementController {
        getAgreementList(cardId: string, options?: RequestOptions): JQueryDeferred<GenModels.AgreementListModel>;
        getAgreementManagementModel(cardId: string, options?: RequestOptions): JQueryDeferred<GenModels.LayoutAgreementManagementModel>;
        getAgreementManagementStartModel(documentCardId: string, options?: RequestOptions): JQueryDeferred<GenModels.AgreementManagementStartModel>;
        getAgreementManagementEditModel(documentCardId: string, reconcileCardId: string, options?: RequestOptions): JQueryDeferred<GenModels.AgreementManagementEditModel>;
        getAgreementTemplateStages(documentId: string, templateId: string, options?: RequestOptions): JQueryDeferred<Array<GenModels.StageModel>>;
        createReconciliation(model: GenModels.ReconcilationCreationModel, options?: RequestOptions): JQueryDeferred<string>;
        changeStages(model: GenModels.ReconcilationEditModel, options?: RequestOptions): JQueryDeferred<void>;
        interruptCurrentStages(documentCardId: string, reconcileCardId: string, options?: RequestOptions): JQueryDeferred<void>;
        agreementStop(documentCardId: string, reconcileCardId: string, options?: RequestOptions): JQueryDeferred<void>;
        agreementFinish(documentCardId: string, reconcileCardId: string, options?: RequestOptions): JQueryDeferred<void>;
        agreementPause(documentCardId: string, reconcileCardId: string, options?: RequestOptions): JQueryDeferred<void>;
        agreementResume(documentCardId: string, reconcileCardId: string, options?: RequestOptions): JQueryDeferred<void>;
        getAgreementHistory(reconcileCardId: string, options?: RequestOptions): JQueryDeferred<GenModels.ApprovalHistoryViewModel>;
    }
}
export declare type $LayoutAgreementController = {
    layoutAgreementController: GenControllers.ILayoutAgreementController;
};
export declare const $LayoutAgreementController: string | ((model?: $LayoutAgreementController) => GenControllers.ILayoutAgreementController);
export declare namespace GenControllers {
    /**
     * Layout card controller
     */
    interface ILayoutCardController {
        /**
         * HTTP: /LayoutCard/NewCard
         */
        newCard(createParams: GenModels.LayoutCardCreateParams, options?: RequestOptions): JQueryDeferred<GenModels.LayoutCardViewModel>;
        /**
         * HTTP: /LayoutCard/View
         */
        view(cardId: string, layoutMode: string, refresh?: boolean, options?: RequestOptions): JQueryDeferred<GenModels.LayoutCardViewModel>;
        /**
         * HTTP: /LayoutCard/Edit
         */
        edit(cardId: string, layoutMode: string, refresh?: boolean, options?: RequestOptions): JQueryDeferred<GenModels.LayoutCardViewModel>;
        /**
         * HTTP: /LayoutCard/Delete
         */
        delete(deleteCardRequestModel: GenModels.DeleteCardRequestModel, options?: RequestOptions): JQueryDeferred<void>;
        /**
         * Gets layout part
         */
        getLayout(cardLayoutParams: GenModels.CardLayoutParams, options?: RequestOptions): JQueryDeferred<GenModels.LayoutCardViewModel>;
        /**
         * Gets layout part
         *
         * @param layoutPartParams layout part params
         */
        getLayoutPart(layoutPartParams: GenModels.LayoutPartParams, options?: RequestOptions): JQueryDeferred<GenModels.LayoutModel>;
        /**
         * HTTP: /LayoutCard/Save
         */
        save(model: GenModels.SaveControlDataModel, options?: RequestOptions): JQueryDeferred<void>;
        /**
         * HTTP: /LayoutCard/CheckModifiedAndLocked
         */
        checkModifiedAndLocked(cardId: string, timestamp: number, options?: RequestOptions): JQueryDeferred<void>;
        /**
         * HTTP: /LayoutCard/ChangeState
         */
        changeState(changeStateDataModel: GenModels.ChangeStateDataModelWithParams, options?: RequestOptions): JQueryDeferred<GenModels.LayoutCardViewModel>;
        /**
         * HTTP: /LayoutCard/ChangeStateEx
         */
        changeStateEx(changeStateDataModel: GenModels.ChangeStateDataModel, options?: RequestOptions): JQueryDeferred<void>;
        /**
         * HTTP: /LayoutCard/CheckAccess
         */
        checkAccess(cardId: string, options?: RequestOptions): JQueryDeferred<boolean>;
    }
    class LayoutCardController extends BaseController implements ILayoutCardController {
        newCard(createParams: GenModels.LayoutCardCreateParams, options?: RequestOptions): JQueryDeferred<GenModels.LayoutCardViewModel>;
        view(cardId: string, layoutMode: string, refresh?: boolean, options?: RequestOptions): JQueryDeferred<GenModels.LayoutCardViewModel>;
        edit(cardId: string, layoutMode: string, refresh?: boolean, options?: RequestOptions): JQueryDeferred<GenModels.LayoutCardViewModel>;
        delete(deleteCardRequestModel: GenModels.DeleteCardRequestModel, options?: RequestOptions): JQueryDeferred<void>;
        getLayout(cardLayoutParams: GenModels.CardLayoutParams, options?: RequestOptions): JQueryDeferred<GenModels.LayoutCardViewModel>;
        getLayoutPart(layoutPartParams: GenModels.LayoutPartParams, options?: RequestOptions): JQueryDeferred<GenModels.LayoutModel>;
        save(model: GenModels.SaveControlDataModel, options?: RequestOptions): JQueryDeferred<void>;
        checkModifiedAndLocked(cardId: string, timestamp: number, options?: RequestOptions): JQueryDeferred<void>;
        changeState(changeStateDataModel: GenModels.ChangeStateDataModelWithParams, options?: RequestOptions): JQueryDeferred<GenModels.LayoutCardViewModel>;
        changeStateEx(changeStateDataModel: GenModels.ChangeStateDataModel, options?: RequestOptions): JQueryDeferred<void>;
        checkAccess(cardId: string, options?: RequestOptions): JQueryDeferred<boolean>;
    }
}
export declare type $LayoutCardController = {
    layoutCardController: GenControllers.ILayoutCardController;
};
export declare const $LayoutCardController: string | ((model?: $LayoutCardController) => GenControllers.ILayoutCardController);
export declare namespace GenControllers {
    /**
     * Layout directory designer controller
     */
    interface ILayoutDirectoryDesignerController {
        /**
         * Find department by name
         *
         * @param query Search string
         */
        findRows(query: GenModels.DirectoryDesignerSearchQuery, options?: RequestOptions): JQueryDeferred<GenModels.DirectoryDesignerSearchResult>;
        /**
         * Load directory tree nodes
         *
         * @param query Search query params
         */
        loadTree(query: GenModels.DirectoryDesignerLoadTreeQuery, options?: RequestOptions): JQueryDeferred<Array<GenModels.DirectoryDesignerTreeNode>>;
        /**
         * Find in tree
         *
         * @param query Search query params
         */
        findInTree(query: GenModels.DirectoryDesignerSearchTreeQuery, options?: RequestOptions): JQueryDeferred<GenModels.DirectoryDesignerSearchTreeResult>;
    }
    class LayoutDirectoryDesignerController extends BaseController implements ILayoutDirectoryDesignerController {
        findRows(query: GenModels.DirectoryDesignerSearchQuery, options?: RequestOptions): JQueryDeferred<GenModels.DirectoryDesignerSearchResult>;
        loadTree(query: GenModels.DirectoryDesignerLoadTreeQuery, options?: RequestOptions): JQueryDeferred<Array<GenModels.DirectoryDesignerTreeNode>>;
        findInTree(query: GenModels.DirectoryDesignerSearchTreeQuery, options?: RequestOptions): JQueryDeferred<GenModels.DirectoryDesignerSearchTreeResult>;
    }
}
export declare type $LayoutDirectoryDesignerController = {
    layoutDirectoryDesignerController: GenControllers.ILayoutDirectoryDesignerController;
};
export declare const $LayoutDirectoryDesignerController: string | ((model?: $LayoutDirectoryDesignerController) => GenControllers.ILayoutDirectoryDesignerController);
export declare namespace GenControllers {
    /**
     * Layout document card controller
     */
    interface ILayoutDocumentController {
        /**
         * Generate number and optionally save it to the card
         *
         * @param request Number generation request
         */
        generateNumber(request: GenModels.GenerateNumberRequest, options?: RequestOptions): JQueryDeferred<GenModels.NumberInfo>;
        /**
         * Release document number
         */
        releaseNumber(request: GenModels.ReleaseNumberRequest, options?: RequestOptions): JQueryDeferred<void>;
        /**
         * Runs acquaintance business process for specified employees
         */
        sendForAcquaintance(request: GenModels.SendForAcquaintanceRequest, options?: RequestOptions): JQueryDeferred<void>;
    }
    class LayoutDocumentController extends BaseController implements ILayoutDocumentController {
        generateNumber(request: GenModels.GenerateNumberRequest, options?: RequestOptions): JQueryDeferred<GenModels.NumberInfo>;
        releaseNumber(request: GenModels.ReleaseNumberRequest, options?: RequestOptions): JQueryDeferred<void>;
        sendForAcquaintance(request: GenModels.SendForAcquaintanceRequest, options?: RequestOptions): JQueryDeferred<void>;
    }
}
export declare type $LayoutDocumentController = {
    layoutDocumentController: GenControllers.ILayoutDocumentController;
};
export declare const $LayoutDocumentController: string | ((model?: $LayoutDocumentController) => GenControllers.ILayoutDocumentController);
export declare namespace GenControllers {
    /**
     * Layout file api controller
     */
    interface ILayoutFileApiController {
        /**
         * POST: /LayoutFileApi/AddFiles
         */
        addFiles(options?: RequestOptions): JQueryDeferred<any>;
        /**
         * POST: /DocumentCardApi/AddNewMainFileVersion
         */
        addNewMainFileVersion(options?: RequestOptions): JQueryDeferred<any>;
        /**
         * POST: /LayoutFileApi/AddFiles
         */
        uploadFiles(ownerCardId?: string, options?: RequestOptions): JQueryDeferred<any>;
        /**
         * GET: /LayoutFileApi/DeleteFiles
         */
        deleteFiles(fileIdList: Array<string>, options?: RequestOptions): JQueryDeferred<void>;
    }
    class LayoutFileApiController extends GenControllers.FileUploadApiController implements ILayoutFileApiController {
        addFiles(options?: RequestOptions): JQueryDeferred<any>;
        addNewMainFileVersion(options?: RequestOptions): JQueryDeferred<any>;
        uploadFiles(ownerCardId?: string, options?: RequestOptions): JQueryDeferred<any>;
        deleteFiles(fileIdList: Array<string>, options?: RequestOptions): JQueryDeferred<void>;
    }
}
export declare type $LayoutFileApiController = {
    layoutFileApiController: GenControllers.ILayoutFileApiController;
};
export declare const $LayoutFileApiController: string | ((model?: $LayoutFileApiController) => GenControllers.ILayoutFileApiController);
export declare namespace GenControllers {
    /**
     * Layout file controller
     */
    interface ILayoutFileController {
        /**
         * POST: /LayoutFile/GetFiles
         */
        getFiles(request: GenModels.GetFilesRequest, options?: RequestOptions): JQueryDeferred<GenModels.FileListDataModelBase>;
        /**
         * POST: /LayoutFile/GetVersions
         */
        getVersions(request: GenModels.GetVersionsRequest, options?: RequestOptions): JQueryDeferred<GenModels.FileListVersionsDataModel>;
        /**
         * POST: /LayoutFile/GetComments
         */
        getComments(request: GenModels.GetCommentsRequest, options?: RequestOptions): JQueryDeferred<GenModels.VersionedFileCommentListModel>;
        /**
         * POST: /LayoutFile/AddOrUpdateComment
         */
        addOrUpdateComment(versionedFileCommentCreateModel: GenModels.VersionedFileCommentCreateModel, options?: RequestOptions): JQueryDeferred<void>;
        /**
         * GET: /LayoutFile/DeleteComment
         */
        deleteComment(versionedFileCommentDeleteModel: GenModels.VersionedFileCommentDeleteModel, options?: RequestOptions): JQueryDeferred<void>;
        /**
         * GET: /LayoutFile/LockFile
         */
        lockFile(request: GenModels.CommmonFileRequest, options?: RequestOptions): JQueryDeferred<GenModels.FileListDataModel>;
        /**
         * Will be remake after task with layout
         *
         * @param ownerCardId Owner card id
         * @param fileCardId File card id
         */
        lockTaskFile(ownerCardId: string, fileCardId: string, options?: RequestOptions): JQueryDeferred<void>;
        /**
         * GET: /LayoutFile/UnlockFile
         */
        unlockFile(request: GenModels.CommmonFileRequest, options?: RequestOptions): JQueryDeferred<GenModels.FileListDataModel>;
        /**
         * Will be remake after task with layout
         *
         * @param ownerCardId Owner card id
         * @param fileCardId File card id
         */
        unlockTaskFile(ownerCardId: string, fileCardId: string, options?: RequestOptions): JQueryDeferred<void>;
        /**
         * GET: /LayoutFile/DeleteFile
         */
        deleteFile(request: GenModels.CommmonFileRequest, options?: RequestOptions): JQueryDeferred<GenModels.FileListDataModel>;
    }
    class LayoutFileController extends BaseController implements ILayoutFileController {
        getFiles(request: GenModels.GetFilesRequest, options?: RequestOptions): JQueryDeferred<GenModels.FileListDataModelBase>;
        getVersions(request: GenModels.GetVersionsRequest, options?: RequestOptions): JQueryDeferred<GenModels.FileListVersionsDataModel>;
        getComments(request: GenModels.GetCommentsRequest, options?: RequestOptions): JQueryDeferred<GenModels.VersionedFileCommentListModel>;
        addOrUpdateComment(versionedFileCommentCreateModel: GenModels.VersionedFileCommentCreateModel, options?: RequestOptions): JQueryDeferred<void>;
        deleteComment(versionedFileCommentDeleteModel: GenModels.VersionedFileCommentDeleteModel, options?: RequestOptions): JQueryDeferred<void>;
        lockFile(request: GenModels.CommmonFileRequest, options?: RequestOptions): JQueryDeferred<GenModels.FileListDataModel>;
        lockTaskFile(ownerCardId: string, fileCardId: string, options?: RequestOptions): JQueryDeferred<void>;
        unlockFile(request: GenModels.CommmonFileRequest, options?: RequestOptions): JQueryDeferred<GenModels.FileListDataModel>;
        unlockTaskFile(ownerCardId: string, fileCardId: string, options?: RequestOptions): JQueryDeferred<void>;
        deleteFile(request: GenModels.CommmonFileRequest, options?: RequestOptions): JQueryDeferred<GenModels.FileListDataModel>;
    }
}
export declare type $LayoutFileController = {
    layoutFileController: GenControllers.ILayoutFileController;
};
export declare const $LayoutFileController: string | ((model?: $LayoutFileController) => GenControllers.ILayoutFileController);
export declare namespace GenControllers {
    /**
     * Layout file controller
     */
    interface ILayoutFolderController {
        /**
         * Get user folders partial tree (only two levels deep).
         *
         * @param request Request model
         */
        getUserFoldersTreeData(request: GenModels.GetUserFoldersTreeDataRequest, options?: RequestOptions): JQueryDeferred<Array<GenModels.FolderNode>>;
        /**
         * Check folder settings, to determine if specified card can be created in this folder
         *
         * @param request Request model
         *
         * @returns JSON representation of {@link GenModels} value, indicating result of the check.
         */
        checkFolderForAvailableCardKind(request: GenModels.CheckFolderForAvailableCardKindRequest, options?: RequestOptions): JQueryDeferred<GenModels.CheckResult>;
        /**
         * Returns common information about folder.
         *
         * @param request Request model
         *
         * @returns Info about folder, see {@link GenModels}
         */
        getFolderInfo(request: GenModels.GetFolderInfoRequest, options?: RequestOptions): JQueryDeferred<GenModels.FolderNode>;
        /**
         * Returns common information about folder.
         *
         * @param request Request model
         *
         * @returns Folder node with parents
         */
        getFolderInfoWithParents(request: GenModels.GetFolderInfoWithParentsRequest, options?: RequestOptions): JQueryDeferred<GenModels.FolderNodeWithParents>;
        /**
         * Detach user folder.
         *
         * @param request Request model
         *
         * @returns JSON representation of {@link GenModels} value, indicating result of the detach.
         */
        detachUserFolders(request: GenModels.DetachUserFoldersRequest, options?: RequestOptions): JQueryDeferred<void>;
        /**
         * Refresh folders settings cache
         */
        refreshFolders(options?: RequestOptions): JQueryDeferred<void>;
    }
    class LayoutFolderController extends BaseController implements ILayoutFolderController {
        getUserFoldersTreeData(request: GenModels.GetUserFoldersTreeDataRequest, options?: RequestOptions): JQueryDeferred<Array<GenModels.FolderNode>>;
        checkFolderForAvailableCardKind(request: GenModels.CheckFolderForAvailableCardKindRequest, options?: RequestOptions): JQueryDeferred<GenModels.CheckResult>;
        getFolderInfo(request: GenModels.GetFolderInfoRequest, options?: RequestOptions): JQueryDeferred<GenModels.FolderNode>;
        getFolderInfoWithParents(request: GenModels.GetFolderInfoWithParentsRequest, options?: RequestOptions): JQueryDeferred<GenModels.FolderNodeWithParents>;
        detachUserFolders(request: GenModels.DetachUserFoldersRequest, options?: RequestOptions): JQueryDeferred<void>;
        refreshFolders(options?: RequestOptions): JQueryDeferred<void>;
    }
}
export declare type $LayoutFolderController = {
    layoutFolderController: GenControllers.ILayoutFolderController;
};
export declare const $LayoutFolderController: string | ((model?: $LayoutFolderController) => GenControllers.ILayoutFolderController);
export declare namespace GenControllers {
    /**
     * Layout links controller
     */
    interface ILayoutLinksController {
        /**
         * GET: /LayoutLinks/DeleteLink
         */
        deleteLink(request: GenModels.DeleteLinkRequest, options?: RequestOptions): JQueryDeferred<void>;
        /**
         * GET: /LayoutLinks/DeleteFileLink
         */
        deleteFile(request: GenModels.DeleteFileRequest, options?: RequestOptions): JQueryDeferred<void>;
        /**
         * GET: /LayoutLinks/GetLinkTypes
         */
        getLinkTypes(options?: RequestOptions): JQueryDeferred<Array<GenModels.LinkType>>;
        /**
         * Returns setting MainLinkTypePresets/LinkType
         */
        getMainLinkTypes(taskId: string, options?: RequestOptions): JQueryDeferred<Array<GenModels.LinkType>>;
        /**
         * POST: /LayoutLinks/CardCreateLinks
         */
        cardCreateLinks(allowedKinds: Array<GenModels.AllowedCardKind>, options?: RequestOptions): JQueryDeferred<Array<GenModels.LayoutKindModel>>;
        /**
         * POST: /LayoutLinks/AddExistingCardLink
         */
        addExistingCardLink(linkParams: GenModels.LayoutLinkCreateParams, options?: RequestOptions): JQueryDeferred<void>;
        /**
         * POST: /LayoutLinks/AddUrlLink
         *
         * @param addUrlLinkParams
         */
        addUrlLink(addUrlLinkParams: GenModels.AddUrlLinkParams, options?: RequestOptions): JQueryDeferred<void>;
        /**
         * POST: /LayoutLinks/AddFilesLinks
         */
        addFilesLinks(options?: RequestOptions): JQueryDeferred<any>;
        /**
         * POST: /LayoutLinks/SetLinkDescription
         */
        setLinkDescription(data: GenModels.LayoutSetLinkDescriptionParams, options?: RequestOptions): JQueryDeferred<void>;
        /**
         * POST: /LayoutLinks/GetLinks
         */
        getLinks(request: GenModels.GetLinksRequest, options?: RequestOptions): JQueryDeferred<GenModels.LinksDataModel>;
        /**
         * POST: /LayoutLinks/CheckReadMainFileAvailable
         */
        checkReadMainFileAvailable(request: GenModels.CheckReadMainFileAvailableRequest, options?: RequestOptions): JQueryDeferred<boolean>;
    }
    class LayoutLinksController extends BaseController implements ILayoutLinksController {
        deleteLink(request: GenModels.DeleteLinkRequest, options?: RequestOptions): JQueryDeferred<void>;
        deleteFile(request: GenModels.DeleteFileRequest, options?: RequestOptions): JQueryDeferred<void>;
        getLinkTypes(options?: RequestOptions): JQueryDeferred<Array<GenModels.LinkType>>;
        getMainLinkTypes(taskId: string, options?: RequestOptions): JQueryDeferred<Array<GenModels.LinkType>>;
        cardCreateLinks(allowedKinds: Array<GenModels.AllowedCardKind>, options?: RequestOptions): JQueryDeferred<Array<GenModels.LayoutKindModel>>;
        addExistingCardLink(linkParams: GenModels.LayoutLinkCreateParams, options?: RequestOptions): JQueryDeferred<void>;
        addUrlLink(addUrlLinkParams: GenModels.AddUrlLinkParams, options?: RequestOptions): JQueryDeferred<void>;
        addFilesLinks(options?: RequestOptions): JQueryDeferred<any>;
        setLinkDescription(data: GenModels.LayoutSetLinkDescriptionParams, options?: RequestOptions): JQueryDeferred<void>;
        getLinks(request: GenModels.GetLinksRequest, options?: RequestOptions): JQueryDeferred<GenModels.LinksDataModel>;
        checkReadMainFileAvailable(request: GenModels.CheckReadMainFileAvailableRequest, options?: RequestOptions): JQueryDeferred<boolean>;
    }
}
export declare type $LayoutLinksController = {
    layoutLinksController: GenControllers.ILayoutLinksController;
};
export declare const $LayoutLinksController: string | ((model?: $LayoutLinksController) => GenControllers.ILayoutLinksController);
export declare namespace GenControllers {
    /**
     * Layout controller for staff directory
     */
    interface ILayoutStaffController {
        /**
         * Find department by name
         *
         * @param query Search string
         */
        findDepartments(query: GenModels.DepartmentSearchQuery, options?: RequestOptions): JQueryDeferred<GenModels.FindDepartmentsResponse>;
        /**
         * Find departments tree by search query
         *
         * @param query Search query
         */
        loadDepartmentsTree(query: GenModels.DepartmentLoadTreeQuery, options?: RequestOptions): JQueryDeferred<Array<GenModels.DepartmentTreeNode>>;
        /**
         * Find in departments tree
         */
        findInDepartmentsTree(query: GenModels.DepartmentFindInTreeQuery, options?: RequestOptions): JQueryDeferred<GenModels.DepartmentFindInTreeResult>;
        /**
         * Get departments info
         */
        getDepartmentsInfo(requestModel: GenModels.GetDepartmentsInfoRequestModel, options?: RequestOptions): JQueryDeferred<Array<GenModels.DepartmentExtendedModel>>;
        /**
         * Get employees and departments info
         */
        getStaffInfo(request: GenModels.StaffInfoRequestModel, options?: RequestOptions): JQueryDeferred<GenModels.StaffInfoResponseModel>;
        /**
         * Get departments and all its parents info
         */
        getDepartmentPath(model: GenModels.GetDepartmentPathRequestModel, options?: RequestOptions): JQueryDeferred<Array<GenModels.DepartmentExtendedModel>>;
        /**
         * Load department by parent
         *
         * @param query search query
         */
        loadDepartmentsFlat(query: GenModels.DepartmentLoadFlatQuery, options?: RequestOptions): JQueryDeferred<GenModels.DepartmentLoadFlatResponse>;
        /**
         * Find department by name
         *
         * @param query search string
         */
        findInDepartmentsFlat(query: GenModels.DepartmentSearchFlatQuery, options?: RequestOptions): JQueryDeferred<GenModels.DepartmentSearchFlatResponse>;
        /**
         * Find department by name
         *
         * @param query search string
         */
        getParentDepartments(query: GenModels.GetParentDepartmentsRequest, options?: RequestOptions): JQueryDeferred<Array<GenModels.DepartmentModel>>;
        /**
         * Get employee image by employee id
         */
        getEmployeeImage(employeeId: string, imageHash?: string, options?: RequestOptions): JQueryDeferred<any>;
        /**
         * HTTP: /Employees/Find
         */
        findEmployees(request: GenModels.FindEmployeesRequest, options?: RequestOptions): JQueryDeferred<GenModels.FindEmployeesResponse>;
    }
    class LayoutStaffController extends BaseController implements ILayoutStaffController {
        findDepartments(query: GenModels.DepartmentSearchQuery, options?: RequestOptions): JQueryDeferred<GenModels.FindDepartmentsResponse>;
        loadDepartmentsTree(query: GenModels.DepartmentLoadTreeQuery, options?: RequestOptions): JQueryDeferred<Array<GenModels.DepartmentTreeNode>>;
        findInDepartmentsTree(query: GenModels.DepartmentFindInTreeQuery, options?: RequestOptions): JQueryDeferred<GenModels.DepartmentFindInTreeResult>;
        getDepartmentsInfo(requestModel: GenModels.GetDepartmentsInfoRequestModel, options?: RequestOptions): JQueryDeferred<Array<GenModels.DepartmentExtendedModel>>;
        getStaffInfo(request: GenModels.StaffInfoRequestModel, options?: RequestOptions): JQueryDeferred<GenModels.StaffInfoResponseModel>;
        getDepartmentPath(model: GenModels.GetDepartmentPathRequestModel, options?: RequestOptions): JQueryDeferred<Array<GenModels.DepartmentExtendedModel>>;
        loadDepartmentsFlat(query: GenModels.DepartmentLoadFlatQuery, options?: RequestOptions): JQueryDeferred<GenModels.DepartmentLoadFlatResponse>;
        findInDepartmentsFlat(query: GenModels.DepartmentSearchFlatQuery, options?: RequestOptions): JQueryDeferred<GenModels.DepartmentSearchFlatResponse>;
        getParentDepartments(query: GenModels.GetParentDepartmentsRequest, options?: RequestOptions): JQueryDeferred<Array<GenModels.DepartmentModel>>;
        getEmployeeImage(employeeId: string, imageHash?: string, options?: RequestOptions): JQueryDeferred<any>;
        findEmployees(request: GenModels.FindEmployeesRequest, options?: RequestOptions): JQueryDeferred<GenModels.FindEmployeesResponse>;
    }
}
export declare type $LayoutStaffController = {
    layoutStaffController: GenControllers.ILayoutStaffController;
};
export declare const $LayoutStaffController: string | ((model?: $LayoutStaffController) => GenControllers.ILayoutStaffController);
export declare namespace GenControllers {
    /**
     * Resources controller
     */
    interface ILocalizationController {
        /**
         * Gets localization
         */
        get(options?: RequestOptions): JQueryDeferred<any>;
        /**
         * Updates localization
         */
        setUserLocale(locale: string, options?: RequestOptions): JQueryDeferred<any>;
    }
    class LocalizationController extends BaseController implements ILocalizationController {
        get(options?: RequestOptions): JQueryDeferred<any>;
        setUserLocale(locale: string, options?: RequestOptions): JQueryDeferred<any>;
    }
}
export declare type $LocalizationController = {
    localizationController: GenControllers.ILocalizationController;
};
export declare const $LocalizationController: string | ((model?: $LocalizationController) => GenControllers.ILocalizationController);
export declare namespace GenControllers {
    /**
     * WebDAV controller
     */
    interface IWebDavController {
        /**
         * Getting file
         *
         * @param id File card identifier
         * @param idext File name
         */
        get(id: string, idext: string, options?: RequestOptions): JQueryDeferred<any>;
        /**
         * Request for resource existence
         *
         * @param id File card identifier
         * @param idext File name
         */
        head(id: string, idext: string, options?: RequestOptions): JQueryDeferred<any>;
        /**
         * Request for resource locking
         *
         * @param id File card identifier
         * @param idext File name
         */
        lock(id: string, idext: string, options?: RequestOptions): JQueryDeferred<any>;
        /**
         * Request for root resource
         *
         * @param id File card identifier
         *
         * @returns Returns supported Http methods list
         */
        options(id: string, options?: RequestOptions): JQueryDeferred<any>;
        /**
         * Get resource properties
         *
         * @param id File card identifier
         * @param idext File name
         */
        propfind(id: string, idext: string, options?: RequestOptions): JQueryDeferred<any>;
        /**
         * Changing resource properties
         *
         * @param id File card identifier
         * @param idext File name
         */
        proppatch(id: string, idext: string, options?: RequestOptions): JQueryDeferred<any>;
        /**
         * Changing file card content (adding file version)
         *
         * @param id File card identifier
         * @param idext File name
         */
        put(id: string, idext: string, options?: RequestOptions): JQueryDeferred<any>;
        /**
         * Request for unlocking resource
         *
         * @param id File card identifier
         * @param idext File name
         */
        unlock(id: string, idext: string, options?: RequestOptions): JQueryDeferred<any>;
    }
    class WebDavController extends BaseController implements IWebDavController {
        get(id: string, idext: string, options?: RequestOptions): JQueryDeferred<any>;
        head(id: string, idext: string, options?: RequestOptions): JQueryDeferred<any>;
        lock(id: string, idext: string, options?: RequestOptions): JQueryDeferred<any>;
        options(id: string, options?: RequestOptions): JQueryDeferred<any>;
        propfind(id: string, idext: string, options?: RequestOptions): JQueryDeferred<any>;
        proppatch(id: string, idext: string, options?: RequestOptions): JQueryDeferred<any>;
        put(id: string, idext: string, options?: RequestOptions): JQueryDeferred<any>;
        unlock(id: string, idext: string, options?: RequestOptions): JQueryDeferred<any>;
    }
}
export declare type $WebDavController = {
    webDavController: GenControllers.IWebDavController;
};
export declare const $WebDavController: string | ((model?: $WebDavController) => GenControllers.IWebDavController);
