import { CreateRelatedCardButtonImpl } from '@docsvision/webclient/BackOffice/CreateRelatedCardButtonImpl';
import { IParametersRequestEventArgs } from '@docsvision/webclient/BackOffice/IParametersRequestEventArgs';
import { GenModels } from '@docsvision/webclient/Generated/DocsVision.WebClient.Models';
import { BaseControl, BaseControlParams, BaseControlState } from '@docsvision/webclient/System/BaseControl';
import { $Layout } from '@docsvision/webclient/System/$Layout';
import { IBindingResult } from '@docsvision/webclient/System/IBindingResult';
import { CancelableApiEvent } from '@docsvision/webclient/System/ApiEvent';
import { $Router } from '@docsvision/webclient/System/$Router';
/** Содержит описание параметров ЭУ CreateRelatedCardButton */
export declare class CreateRelatedCardButtonParams extends BaseControlParams {
    /** Стандартный CSS класс со стилями элемента управления. */
    standardCssClass?: string;
    /** Текст всплывающей подсказки */
    tip?: string;
    /** Текст кнопки */
    text?: string;
    /** Режим открытия создаваемых карточек. */
    openMode?: GenModels.TasksOpenMode;
    /** Режимы создания карточек */
    createRelatedCardModels: GenModels.CreateRelatedCardModel[];
    /** Включена ли вертикальная ориентация. */
    verticalOrientation?: boolean;
    /** Ограничение количества отображаемых кнопок (остальные кнопки будут доступны по кнопке "..."). */
    buttonsLimit?: number;
    /** Событие, которое возникает перед созданием карточки, позволяет задать дополнительные параметры создания карточки */
    parametersRequest?: CancelableApiEvent<IParametersRequestEventArgs>;
    services?: $Router & $Layout;
}
/** @internal */
export interface CreateRelatedCardButtonState extends CreateRelatedCardButtonParams, BaseControlState {
    isChanging: boolean;
}
/** Содержит реализацию ЭУ CreateRelatedCardButton */
export declare class CreateRelatedCardButton extends BaseControl<CreateRelatedCardButtonParams, CreateRelatedCardButtonState> {
    protected createParams(): CreateRelatedCardButtonParams;
    /** @internal */
    protected createImpl(): CreateRelatedCardButtonImpl;
    private readonly createRelatedCardButtonImpl;
    protected createRelatedCardModels: IBindingResult<GenModels.CreateRelatedCardModel[]>;
    /**
     * Показать меню со всеми кнопками.
     */
    showMenu(): void;
    /**
     * Скрыть меню со всеми кнопками.
     */
    hideMenu(): void;
    /**
     * Выполнить нажатие по кнопке с указанной моделью создания карточки
     * @param createRelatedCardModel Идентификатор операции
     */
    performClick(createRelatedCardModel: GenModels.CreateRelatedCardModel): void;
}
