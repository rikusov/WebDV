/// <reference types="react" />
import { StaffDirectoryItems } from '@docsvision/webclient/BackOffice/StaffDirectoryItems';
import { GenModels } from '@docsvision/webclient/Generated/DocsVision.WebClient.Models';
import { TaskGroupIntervalModel, TaskGroupInterval } from '@docsvision/webclient/BackOffice/TaskGroupIntervalModel';
import { IStaffDataLoadingEventArgs } from '@docsvision/webclient/BackOffice/IStaffDataLoadingEventArgs';
import { ICancelableEventArgs } from '@docsvision/webclient/System/ICancelableEventArgs';
import { $ApplicationSettings } from '@docsvision/webclient/StandardServices';
export interface IPerformersTableProps {
    data: TaskGroupIntervalModel;
    dateFormat: string;
    allowedPerformerTypes: GenModels.DirectoryDataType;
    allowedPerformerAreas: GenModels.DirectoryDataType;
    performersPredefinedFilter: GenModels.IDirectoryItemData;
    canEdit: boolean;
    enableFavorites: boolean;
    intervalManagerEndDate: Date;
    favoritesKey: string;
    onPerformerChanged: (task: TaskGroupInterval, newPerformer: GenModels.IDirectoryItemData) => void;
    onChangeDurationClick: (task: TaskGroupInterval) => void;
    onChangeDescriptionClick: (task: TaskGroupInterval) => void;
    onToggleResponsibleClick: (task: TaskGroupInterval) => void;
    onNewPerformersSelected: (items: GenModels.IDirectoryItemData[]) => void;
    onReorder: (items: TaskGroupInterval[]) => void;
    onMoveUpClick: (index: number) => void;
    onMoveDownClick: (index: number) => void;
    onDeleteClick: (task: TaskGroupInterval) => void;
    onToggleDistributionClick: (task: TaskGroupInterval) => void;
    onStaffItemsLoading: (sender: StaffDirectoryItems, args: ICancelableEventArgs<IStaffDataLoadingEventArgs>, task?: TaskGroupInterval) => void;
    setTableHelperRow: (element: HTMLElement) => void;
    services: $ApplicationSettings;
}
export declare const PerformersTable: (props: IPerformersTableProps) => JSX.Element;
