import { GroupTaskCardSelectPerformersImpl, GroupTaskCardSelectPerformersState } from "@docsvision/webclient/BackOffice/GroupTaskCardSelectPerformersImpl";
import { GenModels } from "@docsvision/webclient/Generated/DocsVision.WebClient.Models";
import { BaseControl, BaseControlParams } from '@docsvision/webclient/System/BaseControl';
import { $EditOperationStore, $LayoutInfo, $CardInfo } from "@docsvision/webclient/System/LayoutServices";
import { IBindingResult } from "@docsvision/webclient/System/IBindingResult";
import { $ApplicationSettings, $CurrentEmployeeId } from '@docsvision/webclient/StandardServices';
import { $MessageBox } from '@docsvision/webclient/System/$MessageBox';
import { $TaskGroupPerformersController } from '@docsvision/webclient/Generated/DocsVision.WebClient.Controllers';
import { IValidationParams } from '@docsvision/webclient/System/IValidationParams';
import { IValidationResult } from '@docsvision/webclient/System/IValidationResult';
import { TaskGroupIntervalModel, TaskGroupInterval } from '@docsvision/webclient/BackOffice/TaskGroupIntervalModel';
import { BasicApiEvent, CancelableApiEvent } from '@docsvision/webclient/System/ApiEvent';
import { IDataChangedEventArgsEx } from '@docsvision/webclient/System/IDataChangedEventArgs';
import { IPerformersEventArgs } from '@docsvision/webclient/BackOffice/IPerformersEventArgs';
import { ITaskIntervalEventArgs } from '@docsvision/webclient/BackOffice/ITaskIntervalEventArgs';
import { ITaskDescriptionEventArgs } from '@docsvision/webclient/BackOffice/ITaskDescriptionEventArgs';
import { IPerformerEventArgs } from '@docsvision/webclient/BackOffice/IPerformerEventArgs';
import { IChangeResponsibleEventArgs } from '@docsvision/webclient/BackOffice/IChangeResponsibleEventArgs';
import { ITaskDurationDialogOpenedEventArgs } from '@docsvision/webclient/BackOffice/ITaskDurationDialogOpenedEventArgs';
import { ITaskDescriptionDialogOpenedEventArgs } from '@docsvision/webclient/BackOffice/ITaskDescriptionDialogOpenedEventArgs';
import { ITaskGroupIntervalEventArgs } from '@docsvision/webclient/BackOffice/ITaskGroupIntervalEventArgs';
import { IChangeExecutionTypeEventArgs } from '@docsvision/webclient/BackOffice/IChangeExecutionTypeEventArgs';
import { ITasksDistributionEventArgs } from '@docsvision/webclient/BackOffice/ITasksDistributionEventArgs';
import { IStaffDataLoadingEventArgs } from '@docsvision/webclient/BackOffice/IStaffDataLoadingEventArgs';
import { IChangingTaskOrderEventArgs } from '@docsvision/webclient/BackOffice/IChangingTaskOrderEventArgs';
import { IUpdateTaskGroupIntervalEventArgs } from '@docsvision/webclient/BackOffice/IUpdateTaskGroupIntervalEventArgs';
/**
 * Содержит публичные свойства элемента управления [Панель выбора исполнителей группы заданий]{@link GroupTaskCardSelectPerformers}.
 */
export declare class GroupTaskCardSelectPerformersParams extends BaseControlParams {
    /** Стандартный CSS класс со стилями элемента управления. */
    standardCssClass?: string;
    value?: TaskGroupIntervalModel;
    /**
     * Бизнес-календарь, который будет использоваться в случае если с исполнителем не ассоциирован свой бизнес-календарь.
     *
     * По умолчанию {@see EMPTY_GUID} (системный календарь).
     */
    defaultCalendarId?: string;
    /** Учитывать ли рабочее время при рассчете дат старта и завершения заданий. */
    useBusinessCalendar?: boolean;
    /** Включен ли автоматический перессчет длительностей всех заданий при редактировании длительности одного задания. */
    autoDurationsRecalculation?: boolean;
    /** Является ли ввод исполнителей обязательным для данной разметки. */
    required?: boolean;
    /** Допустимые для выбора исполнители. */
    allowedPerformerTypes?: GenModels.DirectoryDataType;
    /** Области, откуда можно выбирать исполнителей. */
    allowedPerformerAreas?: GenModels.DirectoryDataType;
    /** Организация, подразделение или группа, из которых ограничен выбор исполнителей. */
    performersPredefinedFilter?: GenModels.IDirectoryItemData;
    /** Доступно ли редактирование */
    canEdit?: boolean;
    /** Режим исполнения заданий, выбранный по умолчанию. */
    defaultExecutionType?: GenModels.ExecutionType;
    /** Режим распределения заданий внутри группового исполнителя по умолчанию. */
    defaultTaskDistribution?: GenModels.TaskGroupPerformerMode;
    /** Включено ли отображение последних выбранных исполнителей */
    enableFavorites?: boolean;
    /** Событие, которое возникает после любого изменения в значении конрола. */
    dataChanged?: BasicApiEvent<IDataChangedEventArgsEx<TaskGroupIntervalModel>>;
    /** Событие, которое возникает перед добавлением новых исполнителей в таблицу. */
    addingPerformers?: CancelableApiEvent<IPerformersEventArgs>;
    /** Событие, которое возникает перед примерением введенного пользователем интервала задачи. */
    changingTaskInterval?: CancelableApiEvent<ITaskIntervalEventArgs>;
    /** Событие, которое возникает перед применением выбранного пользователем исполнителя для задачи. */
    changingTaskPerformer?: CancelableApiEvent<IPerformerEventArgs>;
    /** Событие, которое возникает перед применением введенного пользователем описания задачи. */
    changingTaskDescription?: CancelableApiEvent<ITaskDescriptionEventArgs>;
    /** Событие, которое возникает перед установкой исполнителя ответственным. */
    changingResponsible?: CancelableApiEvent<IChangeResponsibleEventArgs>;
    /** Событие, которое возникает после открытия диалога редактирования сроков задачи. */
    editTaskDurationDialogOpened?: BasicApiEvent<ITaskDurationDialogOpenedEventArgs>;
    /** Событие, которое возникает после открытия диалога редактирования описания задачи. */
    editTaskDescriptionDialogOpened?: BasicApiEvent<ITaskDescriptionDialogOpenedEventArgs>;
    /** Событие, которое возникает перед удалением задачи. */
    deletingTask?: CancelableApiEvent<ITaskGroupIntervalEventArgs>;
    /** Событие, которое возникает перед сменой типа исполнения. */
    changingExecutionType?: CancelableApiEvent<IChangeExecutionTypeEventArgs>;
    /** Событие, которое возникает перед сменой режима распределения заданий в групповых исполнителях. */
    changingTaskDistribution?: CancelableApiEvent<ITasksDistributionEventArgs>;
    /** Событие, которое возникает при загрузке данных контролом выбора исполнителей. Событие допускает модификацию запроса. */
    performersLoading?: CancelableApiEvent<IStaffDataLoadingEventArgs>;
    /** Событие, которое возникает перед изменением порядка исполнителей */
    changingOrder?: CancelableApiEvent<IChangingTaskOrderEventArgs>;
    /** Событие, которое возникает при вызове {@see setTaskGroupInterval}. */
    taskGroupIntervalChanging?: CancelableApiEvent<IUpdateTaskGroupIntervalEventArgs>;
    /** Событие, которое возникает после вызова {@see setTaskGroupInterval}. */
    taskGroupIntervalChanged?: BasicApiEvent<IUpdateTaskGroupIntervalEventArgs>;
    services?: $EditOperationStore & $ApplicationSettings & $MessageBox & $TaskGroupPerformersController & $LayoutInfo & $CardInfo & $CurrentEmployeeId & $ApplicationSettings;
}
/**
 * Класс элемента управления Панель выбора исполнителей группы заданий
 *
 * Добавляет в web-разметку панель для редактирования исполнителей группы заданий.
 */
export declare class GroupTaskCardSelectPerformers extends BaseControl<GroupTaskCardSelectPerformersParams, GroupTaskCardSelectPerformersState> {
    protected createParams(): GroupTaskCardSelectPerformersParams;
    protected getServices(): $EditOperationStore & $ApplicationSettings & $MessageBox & $TaskGroupPerformersController & $LayoutInfo & $CardInfo & $CurrentEmployeeId;
    protected createImpl(): GroupTaskCardSelectPerformersImpl;
    /** Установка общего интервала выполнения всей группы заданий. */
    setTaskGroupInterval(startDate: Date, endDate: Date, duration: number): JQueryDeferred<void>;
    validate(params: IValidationParams): IValidationResult[];
    /** Запускает рассчет дат начала/завершения заданий (с учетом бизнес-календаря, если это указано в настройках). */
    calculateIntervalDates(): JQueryDeferred<void>;
    /** Добавляет исполнителей */
    addPerformers(performers: GenModels.IDirectoryItemData[]): Promise<void>;
    /** Устанавливает интервал для отдельной задачи, запуская перерассчет. */
    setTaskInterval(task: TaskGroupInterval, startDate: Date, endDate: Date, duration: number): Promise<void>;
    /** Устанавливает нового исполнителя задания. */
    setPerformer(task: TaskGroupInterval, performer: GenModels.IDirectoryItemData): Promise<void> | JQueryDeferred<void>;
    /** Устанавливает или снимает флаг "ответственный" для задания. */
    setIsResponsible(task: TaskGroupInterval, value: boolean): JQueryDeferred<void>;
    /** Удаляет задание. */
    deleteTask(task: TaskGroupInterval): JQueryDeferred<void>;
    /** Обновляет порядок заданий. */
    reorderTasks(items: TaskGroupInterval[]): JQueryDeferred<void>;
    /** Устанавливает режим исполнения. */
    setExecutionType(executionType: GenModels.ExecutionType): JQueryDeferred<void>;
    /** Открывает диалог редактирования сроков задания. */
    showEditDurationDialog(task: TaskGroupInterval): Promise<
import("./Data/ITaskDurationDialogManagement").ITaskDurationDialogManagement>;
    /** Открывает диалог редактирования сроков задания. */
    showEditDescriptionDialog(task: TaskGroupInterval): Promise<
import("./Data/ITaskDescriptionDialogManagement").ITaskDescriptionDialogManagement>;
    /** Устанавливает или снимает флаг "ответственный" для задания. */
    setTasksDistribution(task: TaskGroupInterval, value: GenModels.TaskGroupPerformerMode): Promise<void>;
    private bindingHandler;
    private performersTypeDialogHandler;
    private performersPredefinedFilterBindingHandler;
    protected getBindings(): IBindingResult<any>[];
    componentWillMount(): void;
}
