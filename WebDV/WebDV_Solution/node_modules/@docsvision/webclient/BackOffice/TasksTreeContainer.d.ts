import { IVisClickParams } from "@docsvision/webclient/BackOffice/IVisClickParams";
import { ITasksTreeContainerProps } from "@docsvision/webclient/BackOffice/ITasksTreeContainerProps";
import { ITasksTreeContainerState } from "@docsvision/webclient/BackOffice/ITasksTreeContainerState";
import { GenModels } from "@docsvision/webclient/Generated/DocsVision.WebClient.Models";
import React from "react";
/** @internal */
export declare class TasksTreeContainer extends React.Component<ITasksTreeContainerProps, ITasksTreeContainerState> {
    state: ITasksTreeContainerState;
    private container;
    constructor(props: any);
    componentDidMount(): void;
    componentWillUnmount(): void;
    componentWillReceiveProps(nextProps: ITasksTreeContainerProps): void;
    updateProps(nextProps: ITasksTreeContainerProps, initialize: boolean): void;
    updateContainer(): void;
    redrawNetwork(): void;
    beforeDrawing(): void;
    afterDrawing(): void;
    onClick(params: IVisClickParams): void;
    onHold(params: IVisClickParams): void;
    onSelectNode(params: IVisClickParams): Promise<void>;
    changeNodeCollapse(nodeId: vis.IdType): void;
    selectNode(selectedNodeId: vis.IdType): void;
    onDeselectNode(): void;
    setFit(): void;
    setFocus(nodeId: vis.IdType): void;
    updateNodeCollapse(nodeId: vis.IdType, hidden: boolean, forceExpand: boolean, expandChildren: boolean): void;
    updateNodeVisibility(nodeId: vis.IdType, hidden: boolean, forceExpand: boolean, expandChildren: boolean): void;
    tasksTreeModelUpdate(prop: GenModels.TasksTreeModel, nextProps: ITasksTreeContainerProps): void;
    readonly data: vis.Data;
    collapseAll(): void;
    expandAll(): void;
    private showHelpBox;
    private getRoots;
    private updateNodes;
    private hideCollapsedBySettingNodes;
    private collapseBySetting;
    private collapseNodeBySetting;
    private getLinkedNode;
    private refresh;
    private getOptions;
    private getColor;
    private getData;
    private getTasksTreeNodeHelpModel;
    private helpBoxDelegationClick;
    private getHeight;
    private hideNode;
    private showNode;
    private findNode;
    render(): JSX.Element;
    renderHelpBox(): JSX.Element;
}
