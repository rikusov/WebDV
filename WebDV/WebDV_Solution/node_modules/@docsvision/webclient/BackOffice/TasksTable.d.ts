/// <reference types="react" />
import { GenModels } from "@docsvision/webclient/Generated/DocsVision.WebClient.Models";
import { BaseControl, BaseControlParams } from '@docsvision/webclient/System/BaseControl';
import { $LayoutInfo, $CardId, $EditOperationStore } from '@docsvision/webclient/System/LayoutServices';
import { TasksTreeNodeResolveService } from '@docsvision/webclient/BackOffice/TasksTreeNodeResolveService';
import { $TasksTreeController, $LayoutFileController, $LayoutCardController } from '@docsvision/webclient/Generated/DocsVision.WebClient.Controllers';
import { TasksTableView } from '@docsvision/webclient/BackOffice/TasksTableView';
import { TasksTableLogic } from '@docsvision/webclient/BackOffice/TasksTableLogic';
import { Optional } from '@docsvision/webclient/System/ServiceContainer';
import { $RouterNavigation } from '@docsvision/webclient/System/$Router';
import { $WindowLocation } from '@docsvision/webclient/Platform/$WindowLocation';
import { ControlImpl } from '@docsvision/webclient/System/ControlImpl';
import { BaseControlImplState } from '@docsvision/webclient/System/BaseControlImpl';
import { $ApplicationSettings, $DeviceType } from '@docsvision/webclient/StandardServices';
import { ITasksTreeColorMap } from '@docsvision/webclient/BackOffice/ITasksTreeColorMap';
import { ITasksTreeGroupMap } from '@docsvision/webclient/BackOffice/ITasksTreeGroupMap';
import { $FileController } from '@docsvision/webclient/Legacy/FileController';
import { $MessageBox } from '@docsvision/webclient/System/$MessageBox';
import { CancelableApiEvent, BasicApiEvent } from '@docsvision/webclient/System/ApiEvent';
import { ITasksTableRow } from '@docsvision/webclient/BackOffice/ITasksTableRow';
/**
 * Содержит публичные свойства элемента управления [Отображение инициатора]{@link TasksTable}.
 */
export declare class TasksTableParams extends BaseControlParams {
    /** Стандартный CSS класс со стилями элемента управления */
    standardCssClass?: string;
    /** Идентификатор списка заданий. */
    taskCardId?: string;
    /** Идентификатор карточки документа или задания */
    cardId?: string;
    /** Текст кнопки. */
    buttonText?: string;
    /** Доступность показа полного дерева */
    canShowFullTree?: boolean;
    /** Режим отображения. */
    displayMode?: GenModels.TasksTreeDisplayMode;
    /** Виды заданий для отображения. */
    viewKinds?: string[];
    /** Сервис для управления резолверами задач. */
    nodeResolveService?: TasksTreeNodeResolveService;
    /** Доступные для отображения столбцы */
    taskColumns?: GenModels.ColumnsConfiguration;
    /** Режим открытия заданий. */
    openMode?: GenModels.OpenMode;
    /** Показывать все узлы развернутыми при загрузке контрола. */
    showExpanded?: boolean;
    /** Цвета. */
    colors?: ITasksTreeColorMap;
    /** Группы. */
    groups?: ITasksTreeGroupMap;
    dialogHeader?: string;
    /** Минимальная ширина контрола */
    minWidth?: number;
    rowRemoving?: CancelableApiEvent<{
        row: ITasksTableRow;
    }>;
    rowRemoved?: BasicApiEvent<{
        row: ITasksTableRow;
    }>;
    /** Сервисы. */
    services?: $LayoutInfo & $TasksTreeController & $CardId & Optional<$TaskTableOptions> & $EditOperationStore & $RouterNavigation & $WindowLocation & $ApplicationSettings & $FileController & $LayoutFileController & $DeviceType & $LayoutCardController & $MessageBox;
}
export interface TasksTableState extends BaseControlImplState, TasksTableParams {
    logic: TasksTableLogic;
    view: TasksTableView;
}
/** Сервис для переопределения реализации TasksTable */
export interface ITaskTableOptions {
    getTaskTableView(params: TasksTableParams): TasksTableView;
    getTaskTableLogic(params: TasksTableParams): TasksTableLogic;
}
export declare type $TaskTableOptions = {
    taskTableOptions: ITaskTableOptions;
};
export declare const $TaskTableOptions: string | ((model?: $TaskTableOptions) => ITaskTableOptions);
/**
 * Класс элемента управления Отображение инициатора.
 */
export declare class TasksTable extends BaseControl<TasksTableParams, TasksTableState> {
    construct(): void;
    protected createParams(): TasksTableParams;
    protected createImpl(): ControlImpl;
    private taskColumns;
    private showFullTreeBinding;
    private viewKindsBinding;
    componentWillMount(): void;
    componentDidMount(): void;
    renderControl(): JSX.Element;
}
