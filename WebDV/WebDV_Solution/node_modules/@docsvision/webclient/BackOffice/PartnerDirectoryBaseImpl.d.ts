/// <reference types="react" />
import { EmployeeVisualizer } from "@docsvision/webclient/BackOffice/EmployeeVisualizer";
import { PartnerDirectoryBaseParams } from "@docsvision/webclient/BackOffice/PartnerDirectoryBase";
import { PartnerDirectoryItemVisualiser } from "@docsvision/webclient/BackOffice/PartnerDirectoryItemVisualiser";
import { GenModels } from "@docsvision/webclient/Generated/DocsVision.WebClient.Models";
import { ITypeaheadSearchQuery } from "@docsvision/webclient/Helpers/Typeahead/Models/ITypeaheadSearchQuery";
import { ITypeaheadSearchResult } from "@docsvision/webclient/Helpers/Typeahead/Models/ITypeaheadSearchResult";
import { ITypeaheadVariant } from "@docsvision/webclient/Helpers/Typeahead/Models/ITypeaheadVariant";
import { DirectorySelectingMode } from '@docsvision/webclient/System/DirectorySelectingMode';
import { DirectoryBaseImpl, DirectoryBaseState } from '@docsvision/webclient/System/DirectoryBaseImpl';
import { IDirectorySelectDialogProps } from '@docsvision/webclient/System/DirectorySelectDialog';
declare type ValueT = GenModels.DepartmentModel | GenModels.EmployeeDataModel;
declare type NodeT = GenModels.DepartmentModel;
declare type ItemT = GenModels.EmployeeDataModel;
/** @internal */
export interface PartnerDirectoryBaseState<T extends ValueT> extends PartnerDirectoryBaseParams<T>, DirectoryBaseState<T, NodeT, ItemT> {
    employeeVisualiser: EmployeeVisualizer;
    itemVisualiser: PartnerDirectoryItemVisualiser;
}
/** @internal */
export declare abstract class PartnerDirectoryBaseImpl<T extends ValueT, ParamsT extends PartnerDirectoryBaseParams<T> = PartnerDirectoryBaseParams<T>, StateT extends PartnerDirectoryBaseState<T> = PartnerDirectoryBaseState<T>> extends DirectoryBaseImpl<T, NodeT, ItemT, ParamsT, StateT> {
    constructor(props: ParamsT, state: StateT);
    /** Что является значением контрола - узлы или записи. */
    getSelectingMode(): DirectorySelectingMode;
    isSelectingNodesMode(): boolean;
    /** Возвращает путь в справочнике для переданного значения. */
    protected getValuePath(value: ValueT): NodeT[];
    protected getCssClass(): string;
    protected onItemEdited(item: GenModels.PartnerDirectorySearchItem): void;
    protected onSelectCreatedEntity(newValue: T): void;
    protected findItems(typeaheadQuery: ITypeaheadSearchQuery): JQueryDeferred<ITypeaheadSearchResult>;
    protected processTypeaheadSelected(variant: ITypeaheadVariant): Promise<void>;
    partnerTipMode: GenModels.PartnerTipModeItems;
    partnerViewMode: GenModels.EmployeeViewMode;
    protected renderFilterBreadcrumbs(): JSX.Element;
    protected onCreateOrganization: () => Promise<void>;
    protected onCreateDepartment: () => Promise<void>;
    protected onCreateEmployee: () => Promise<void>;
    protected renderTypeaheadHeader(): JSX.Element;
    protected renderSelectDialog(props: IDirectorySelectDialogProps<ValueT, NodeT, ItemT> & {
        ref: any;
    }): JSX.Element;
}
export {};
