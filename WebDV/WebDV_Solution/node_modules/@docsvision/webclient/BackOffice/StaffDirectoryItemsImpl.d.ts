import { StaffDirectoryItemsParams, StaffNodeType, StaffValueType } from '@docsvision/webclient/BackOffice/StaffDirectoryItems';
import { StaffDirectoryDataVisualiser } from '@docsvision/webclient/BackOffice/StaffDirectoryDataVisualiser';
import { GenModels } from '@docsvision/webclient/Generated/DocsVision.WebClient.Models';
import { IEditPopoverProps } from '@docsvision/webclient/Helpers/PopoverHelpers/EditPopover/IEditPopoverProps';
import { ITypeaheadProps } from '@docsvision/webclient/Helpers/Typeahead/ITypeaheadProps';
import { ITypeaheadSearchQuery } from '@docsvision/webclient/Helpers/Typeahead/Models/ITypeaheadSearchQuery';
import { ITypeaheadSearchResult } from '@docsvision/webclient/Helpers/Typeahead/Models/ITypeaheadSearchResult';
import { ITypeaheadVariant } from '@docsvision/webclient/Helpers/Typeahead/Models/ITypeaheadVariant';
import { DirectorySelectingMode } from '@docsvision/webclient/System/DirectorySelectingMode';
import { DirectoryBaseImpl, DirectoryBaseState } from '@docsvision/webclient/System/DirectoryBaseImpl';
import { IDirectorySelectDialogProps } from '@docsvision/webclient/System/DirectorySelectDialog';
import React from 'react';
declare type ItemT = GenModels.IDirectoryItemData;
export interface StaffDirectoryItemsState<ValueT extends StaffValueType = StaffValueType> extends StaffDirectoryItemsParams<ValueT>, DirectoryBaseState<ValueT, StaffNodeType, ItemT> {
    dataVisualiser: StaffDirectoryDataVisualiser;
    dialogSelectedValues: ItemT[];
    dataSource: GenModels.StaffItemsDataSourceModel;
    enableItemsAnimation: boolean;
}
export declare class StaffDirectoryItemsImpl extends DirectoryBaseImpl<StaffValueType, StaffNodeType, ItemT, StaffDirectoryItemsParams, StaffDirectoryItemsState> {
    private initialSetValue;
    static FAVORITES_COUNT: number;
    constructor(props: StaffDirectoryItemsParams, state: StaffDirectoryItemsState);
    componentDidMount(): void;
    componentWillUnmount(): void;
    protected findItems(typeaheadQuery: ITypeaheadSearchQuery): JQueryDeferred<ITypeaheadSearchResult>;
    getQueryContext(): GenModels.StaffQueryContext;
    protected getValuePath(value: StaffValueType): StaffNodeType[];
    protected getSelectingMode(): DirectorySelectingMode;
    setValue(value: StaffValueType, redraw: boolean): void;
    private saveValueOnChange;
    private valuesEqual;
    protected getTextValue(): string;
    hasValue(): boolean;
    protected getValueTitle(): string;
    protected processTypeaheadSelected(typeaheadVariant: ITypeaheadVariant): Promise<void>;
    protected onSelectedValue(variantValue: GenModels.IDirectoryItemData): Promise<void>;
    showDictionary(): void | JQueryDeferred<any>;
    protected onDirectoryDialogSelectButtonClick(): Promise<void>;
    protected onInputChange(event: any): void;
    protected onInputKeyDown(ev: React.KeyboardEvent<any>): void;
    protected onPlaceholderClick(event: any): void;
    protected focusInput: () => void;
    private shouldShowFavorites;
    protected onRemoveClick(item: ItemT, ev: React.MouseEvent<any>): Promise<void>;
    protected showEditPopover(popoverOptions?: IEditPopoverProps): JQueryDeferred<
import("C:/WebCP/Bin/TypeScriptDefinitions/System/Controls/DirectoryBase/DirectoryBase").DirectoryBase<StaffValueType, GenModels.IDirectoryItemData, GenModels.IDirectoryItemData, StaffDirectoryItemsParams<StaffValueType>, StaffDirectoryItemsState<StaffValueType>>>;
    protected onEditPopoverShowed(control: any): void;
    protected getItemTooltip(employee: GenModels.IDirectoryItemData): string;
    protected getTypeaheadProps(): ITypeaheadProps & {
        ref: any;
    };
    protected onDialogSelectedValuesChanged: (values: GenModels.IDirectoryItemData[]) => void;
    protected getCssClass(): string;
    protected renderWithText(): JSX.Element;
    protected renderWithTextSingleSelection: () => JSX.Element;
    protected renderWithTextMultipleSelection: () => JSX.Element;
    protected renderViewItemList(vertical?: boolean, showIcons?: boolean): JSX.Element;
    protected renderSimpleViewValue(): JSX.Element;
    protected getItemIcon(item: ItemT, forceShowIcon?: boolean): string;
    protected renderEditItemList(): JSX.Element;
    protected alreadySelected(val: GenModels.IDirectoryItemData): boolean;
    protected renderInto(props: StaffDirectoryItemsParams, container: HTMLElement): void;
    protected renderSelectDialog(props: IDirectorySelectDialogProps<StaffValueType, StaffNodeType, ItemT> & {
        ref: any;
    }): JSX.Element;
    renderTypeahead(): JSX.Element;
}
export {};
