import { EmployeeVisualizer } from "@docsvision/webclient/BackOffice/EmployeeVisualizer";
import { PartnerParams } from "@docsvision/webclient/BackOffice/Partner";
import { PartnerDirectoryItemVisualiser } from "@docsvision/webclient/BackOffice/PartnerDirectoryItemVisualiser";
import { GenModels } from "@docsvision/webclient/Generated/DocsVision.WebClient.Models";
import { Typeahead } from "@docsvision/webclient/Helpers/Typeahead/Typeahead";
import { InputBasedControlState } from "@docsvision/webclient/System/InputBasedControlImpl";
import { IBindingResult } from "@docsvision/webclient/System/IBindingResult";
import { RequestHelper } from "@docsvision/webclient/System/RequestHelper";
import { SimpleEvent } from "@docsvision/webclient/System/SimpleEvent";
import React from "react";
import { PartnerBaseImpl } from '@docsvision/webclient/BackOffice/PartnerBaseImpl';
/** @internal */
export interface PartnerState extends PartnerParams, InputBasedControlState<GenModels.EmployeeDataModel> {
    binding: IBindingResult<GenModels.EmployeeDataModel>;
    requestHelper: RequestHelper;
    directoryDialogSelectedValue: GenModels.EmployeeDataModel;
    inputKeyDown: SimpleEvent<React.KeyboardEvent<any>>;
    employeeVisualiser: EmployeeVisualizer;
    itemVisualiser: PartnerDirectoryItemVisualiser;
    typeahead: Typeahead;
    beforeModalSelectedFilterPath: GenModels.DepartmentModel[];
    /** Путь для элемента из поиска, отличается от selectedFilterPath тем, что применяется только при закрытии PartnerSelectDialog */
    searchFilterPath: GenModels.DepartmentModel[];
}
/** @internal */
export declare type PartnerImplProps = PartnerParams;
/** @internal */
export declare type PartnerImplState = PartnerState;
/** @internal */
export declare class PartnerImpl extends PartnerBaseImpl<GenModels.EmployeeDataModel, PartnerParams, PartnerState> {
    protected getTextValue(): string;
    protected getValueTitle(): string;
    protected renderInto(props: PartnerParams, container: HTMLElement): void;
}
