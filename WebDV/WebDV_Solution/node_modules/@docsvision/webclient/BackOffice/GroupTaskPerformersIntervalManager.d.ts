import { GenModels } from '@docsvision/webclient/Generated/DocsVision.WebClient.Models';
import { $TaskGroupPerformersController } from '@docsvision/webclient/Generated/DocsVision.WebClient.Controllers';
import { TaskGroupInterval } from '@docsvision/webclient/BackOffice/TaskGroupIntervalModel';
import { $ApplicationSettings } from '@docsvision/webclient/StandardServices';
export declare class GroupTaskPerformersIntervalManager {
    services: $TaskGroupPerformersController & $ApplicationSettings;
    private _startDate;
    private _endDate;
    private _duration;
    private _executionType;
    private _intervals;
    private _defaultCalendarId;
    private _useBusinessCalendar;
    constructor(services: $TaskGroupPerformersController & $ApplicationSettings);
    initialize(defaultCalendarId: string, useBusinessCalendar: boolean, executionType: GenModels.ExecutionType, autoDurationsRecalculation: boolean, intervals: TaskGroupInterval[]): void;
    readonly startDate: Date;
    readonly endDate: Date;
    readonly duration: number;
    executionType: GenModels.ExecutionType;
    intervals: TaskGroupInterval[];
    defaultCalendarId: string;
    useBusinessCalendar: any;
    autoDurationsRecalculation: boolean;
    changeTotalRange(startDate: Date, endDate: Date, duration: number): JQueryDeferred<TaskGroupInterval[]>;
    initializeTotalRange(startDate: Date, endDate: Date, duration: number): void;
    changeExecutionType(executionType: GenModels.ExecutionType): JQueryDeferred<TaskGroupInterval[]>;
    private updateParallelIntervals;
    calculateIntervalDates(): JQueryDeferred<TaskGroupInterval[]>;
    addInterval(interval: Partial<TaskGroupInterval>): JQueryDeferred<TaskGroupInterval[]>;
    setIntervalDescription(performerId: string, description: string): void;
    setIntervalRange(performerId: string, startDate: Date, endDate: Date, duration: number): void;
    setIntervalPerformer(performerId: string, newPerformer: GenModels.IDirectoryItemData): void;
    setIntervalResponsible(performerId: string, isResponsible: boolean): void;
    setIntervalDistribution(performerId: string, mode: GenModels.TaskGroupPerformerMode): void;
    setIntervalsOrder(performerIds: string[]): void;
    removeInterval(performerId: string): JQueryDeferred<TaskGroupInterval[]>;
    moveTaskIntervalUp(interval: TaskGroupInterval): JQueryDeferred<TaskGroupInterval[]>;
    moveTaskIntervalDown(interval: TaskGroupInterval): JQueryDeferred<TaskGroupInterval[]>;
    distributeDurations(performerId: string, oldStartDate: Date, newStartDate: Date, force?: boolean): Promise<void>;
    private distributeDurationsInternal;
}
