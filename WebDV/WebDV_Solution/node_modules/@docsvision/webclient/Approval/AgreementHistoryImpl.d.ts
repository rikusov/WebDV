/// <reference types="react" />
import { AgreementHistoryParams } from "@docsvision/webclient/Approval/AgreementHistory";
import { GenModels } from "@docsvision/webclient/Generated/DocsVision.WebClient.Models";
import { ModalHost } from '@docsvision/webclient/Helpers/ModalHost';
import { PerformOnce } from '@docsvision/webclient/Legacy/Utils';
import { BaseControlState } from "@docsvision/webclient/System/BaseControl";
import { BaseControlImpl } from "@docsvision/webclient/System/BaseControlImpl";
/** @internal */
export interface AgreementHistoryState extends BaseControlState, AgreementHistoryParams {
    dialog: ModalHost;
    isHistoryDataReceived: boolean;
    loading: boolean;
    lastLoadedData: GenModels.ApprovalHistoryViewModel;
}
/** @internal */
export declare type AgreementHistoryImplState = AgreementHistoryState;
/** @internal */
export declare type AgreementHistoryImplProps = AgreementHistoryState;
/** @internal */
export declare class AgreementHistoryImpl extends BaseControlImpl<AgreementHistoryParams, AgreementHistoryImplState> {
    buttonClickPerformOnce: PerformOnce;
    /** @internal */
    constructor(props: AgreementHistoryParams, state: AgreementHistoryState);
    componentWillMount(): void;
    /** Показать отчёт. */
    showReport(): void;
    private closeDialog;
    /** Скрыть отчёт. */
    hideReport(): void;
    /** Можно ли показать отчёт. */
    canShowReport(): boolean;
    /** Загрузить историю. */
    loadData(): JQueryDeferred<GenModels.ApprovalHistoryViewModel>;
    /**
     * Отрисовать содержимое диалогового окна
     * @param dialog Диалог
     * @param data Данные
     */
    private renderDialogContent;
    /** Обновить отчёт. */
    refreshReport(): void;
    /** Показан ли отчёт. */
    readonly isReportShown: boolean;
    /** Отрисовать контрол. */
    renderControl(): JSX.Element;
    /** Отрисовать кнопку открытия истории. */
    renderButton(): JSX.Element;
    /** Отрисовать встроенную таблицу (которая не в модальном окне). */
    renderInlineTable(): JSX.Element;
}
