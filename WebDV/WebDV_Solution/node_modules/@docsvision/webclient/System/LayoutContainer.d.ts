import { GenModels } from "@docsvision/webclient/Generated/DocsVision.WebClient.Models";
import { Layout } from "@docsvision/webclient/System/Layout";
import { $LayoutInfo } from '@docsvision/webclient/System/LayoutServices';
import { ILayoutContainer } from "@docsvision/webclient/System/ILayoutContainer";
import { IRealTimeCommunicationMessage } from '@docsvision/webclient/System/IRealTimeCommunicationMessage';
import { ServiceContainer } from "@docsvision/webclient/System/ServiceContainer";
/** Сервисный класс, обеспечивающий функционирование разметки. */
export declare class LayoutContainer<T extends GenModels.LayoutViewModel> implements ILayoutContainer<T> {
    private layoutContainerParams;
    private layoutContainerInfo;
    private layoutResolver;
    private initialized;
    layoutServiceContainer: ServiceContainer;
    services: $LayoutInfo;
    private constructor();
    /**
     * Скрывать ли диалог подтверждения действия пользователя при изменении маршрута
     */
    pageLeaveConfirmationDisabled: boolean;
    /**
     * Возвращает ID текущей разметки
     * @internal
     */
    readonly id: string;
    /**
     * Возвращает разметку карточки.
     */
    readonly layout: Layout;
    /**
     * Возвращает корневой элемент, в котором расположена разметка.
     */
    readonly rootElement: HTMLElement;
    /** Модель разметки, поступившая с сервера Web-клиента. */
    readonly layoutViewModel: T;
    /**
     * Возвращает контейнеры дочерних разметок
     */
    readonly children: ILayoutContainer<GenModels.LayoutViewModel>[];
    /**
     * Возвращает родительский контейнер, в котором находится текущий контейнер
     */
    readonly parent: ILayoutContainer<GenModels.LayoutViewModel>;
    /** @internal */
    static create<T extends GenModels.LayoutViewModel>(options: {
        layoutViewModel: T;
        name: string;
        root: string | HTMLElement;
        positionName: string;
        parent: LayoutContainer<GenModels.LayoutViewModel>;
        unmountCallback?: (layoutContainer: LayoutContainer<GenModels.LayoutViewModel>) => void;
        mountCallback: (layoutContainer: LayoutContainer<GenModels.LayoutViewModel>) => void;
        services: ServiceContainer;
    }): JQueryDeferred<LayoutContainer<T>>;
    /**
     * @internal
     */
    removeChild(layoutContainer: LayoutContainer<GenModels.LayoutViewModel>): void;
    /**
     * @internal
     */
    addChild(layoutContainer: LayoutContainer<GenModels.LayoutViewModel>): void;
    /**
     * Инициализация разметки.
     */
    protected initialize(deferred: JQueryDeferred<Layout>): Promise<void>;
    /**
     * Перезагрузка разметки с данными, переданными в параметре layoutViewModel
     */
    reload(layoutViewModel: T): JQueryDeferred<void>;
    /**
     * Уничтожение разметки.
     */
    destroy(): JQueryDeferred<any>;
    protected onCardChanged: (message: IRealTimeCommunicationMessage<any>) => void;
    protected onCardDisabled: (message: IRealTimeCommunicationMessage<any>) => void;
    /** @internal */
    protected mapLayout(layoutResolver: () => Layout): void;
    /** @internal */
    protected prepareModel(deferred: JQueryDeferred<Layout>): void;
    /** @internal */
    protected renderLayout(deferred: JQueryDeferred<Layout>): void;
    protected loadAsyncControls(): Promise<void>;
    /**
     * @deprecated Используйте свойство positionName.
     */
    readonly PositionName: string;
    /**
     * @deprecated Возвращает наименование позиции разметки
     */
    readonly positionName: string;
    /**
     * @deprecated Возвращает наименование разметки
     */
    readonly name: string;
    /**
     * @deprecated Возвращает наименование родительской разметки
     */
    readonly owner: string;
    /**
     * @deprecated Возвращает идентификатор корневого элемента, в котором расположена разметка.
     */
    readonly rootElementId: string;
    /** @deprecated Модель разметки, поступившая с сервера Web-клиента. */
    readonly layoutCardModel: T;
}
