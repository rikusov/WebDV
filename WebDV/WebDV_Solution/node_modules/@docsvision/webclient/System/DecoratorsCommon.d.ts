/** Возвращает описатель собственного свойства, или свойства одного из родительских классов.  */
export declare function getPropertyDescriptor(control: object, propertyKey: string): PropertyDescriptor;
/** Информация о свойстве класса, включающая данные о том, где именно оно было объявлено в цепочке наследования. */
export interface HandlerPropertyInfo {
    /** Описание свойства */
    descriptor: PropertyDescriptor;
    /** Прототип, в котором обнаружено свойство. */
    prototype: object;
    /** Как далеко в цепочке наследования объявлено свойство. Если в текущем классе - 0, в родительском - 1 и т.д. */
    inheritanceDistance: number;
}
/**
 * Возвращает описатель собственного свойства, или свойства одного из родительских классов с
 * дополнительной информации о том, в каком классе объявлено свойство.
 */
export declare function getHandlerPropertyInfo(control: object, propertyKey: string): HandlerPropertyInfo;
/** Возвращает метаданные, ассоциированные при помощи Reflect.metadata с собственным свойством, или свойством базового класса. */
export declare function getMetadataValue(obj: any, propertyKey: string, metadataKee: string): any;
/** Добавляет в объект свойство со значением undefined. */
export declare function declareSimpleProperty(target: object, propertyKey: string): void;
