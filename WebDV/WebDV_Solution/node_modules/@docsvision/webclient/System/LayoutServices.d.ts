import { GenModels } from "@docsvision/webclient/Generated/DocsVision.WebClient.Models";
import { ControlWrapperMap } from "@docsvision/webclient/System/ControlWrapperMap";
import { IEditOperationStore } from "@docsvision/webclient/System/IEditOperationStore";
import { ILayout } from "@docsvision/webclient/System/$Layout";
/** Сервис информации о разметке. */
export declare type $LayoutInfo = {
    layoutInfo: GenModels.LayoutInfoModel;
};
export declare const $LayoutInfo: string | ((model?: $LayoutInfo) => GenModels.LayoutInfoModel);
/** Сервис информации о карточке. */
export declare type $CardInfo = {
    cardInfo: GenModels.CardInfoModel;
};
export declare const $CardInfo: string | ((model?: $CardInfo) => GenModels.CardInfoModel);
/** Сервис информации о карточке. */
export declare type $RowInfo = {
    rowInfo: GenModels.RowInfoModel;
};
export declare const $RowInfo: string | ((model?: $RowInfo) => GenModels.RowInfoModel);
/** Сервис информации о метке времени последнего изменения карточки. Значение может быть перезаписано. */
export declare type $CardTimestamp = {
    cardTimestamp: number;
};
export declare const $CardTimestamp: string | ((model?: $CardTimestamp) => number);
/** Сервис информации о связанных источниках данных */
export declare type $ExtendedDataSourceInfos = {
    extendedDataSourceInfos: GenModels.ExtendedDataSourceInfoModel[];
};
export declare const $ExtendedDataSourceInfos: string | ((model?: $ExtendedDataSourceInfos) => GenModels.ExtendedDataSourceInfoModel[]);
/** Сервис для доступа к идентификатору карточки. */
export declare type $CardId = {
    cardId: string;
};
export declare const $CardId: string | ((model?: $CardId) => string);
/** Сервис для доступа к идентификатору строки секции. */
export declare type $RowId = {
    rowId: string;
};
export declare const $RowId: string | ((model?: $RowId) => string);
/** Сервис для доступа к операциям редактирования. */
export declare type $EditOperationStore = {
    editOperations?: IEditOperationStore;
};
export declare const $EditOperationStore: string | ((model?: $EditOperationStore) => IEditOperationStore);
/** Сервис для доступа к элементам управления разметки. */
export declare type $ControlStore = {
    controlStore: ControlWrapperMap;
};
export declare const $ControlStore: string | ((model?: $ControlStore) => ControlWrapperMap);
/** Сервис для доступа к родительской разметке. */
export declare type $OwnerLayout = {
    ownerLayout: ILayout;
};
export declare const $OwnerLayout: string | ((model?: $OwnerLayout) => ILayout);
/** Сервис для доступа к имени локации, в которой размещена текущая разметка. */
export declare type $CurrentLocation = {
    currentLocation: string;
};
export declare const $CurrentLocation: string | ((model?: $CurrentLocation) => string);
