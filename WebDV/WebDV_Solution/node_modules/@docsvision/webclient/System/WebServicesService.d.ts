import { RequestOptions } from '@docsvision/webclient/Legacy/Utils';
import { $ApplicationSettings } from '@docsvision/webclient/StandardServices';
import { $RequestManager } from '@docsvision/webclient/System/$RequestManager';
import { BaseController, HttpMethods } from '@docsvision/webclient/System/BaseController';
import { $WebSockets } from '@docsvision/webclient/System/$WebSockets';
import { IWebServicesConnection } from '@docsvision/webclient/System/IWebServicesConnection';
import { IWebServicesInfo } from '@docsvision/webclient/System/IWebServicesInfo';
import { IWebServicesRequest } from '@docsvision/webclient/System/IWebServicesRequest';
import { IWebServicesService } from '@docsvision/webclient/System/IWebServicesService';
/** @internal Реализация {@link IWebServicesService}. */
export declare class WebServicesService extends BaseController implements IWebServicesService {
    protected services: $RequestManager & $WebSockets & $ApplicationSettings;
    constructor(services: $RequestManager & $WebSockets & $ApplicationSettings);
    check(): JQueryDeferred<IWebServicesInfo>;
    get<T>(plugin: string, message?: IWebServicesRequest<T>, options?: RequestOptions): JQueryDeferred<T>;
    post<T>(plugin: string, message?: IWebServicesRequest<T>, options?: RequestOptions): JQueryDeferred<T>;
    connect(plugin: string): JQueryDeferred<IWebServicesConnection>;
    protected getUrl({ controller, action, isApi, method, data, relativePath }: {
        controller: string;
        action: string;
        isApi: boolean;
        method: HttpMethods;
        data: any;
        relativePath: boolean;
    }): string;
    private readonly addressConnect;
    private readonly address;
}
