import { LayoutControl } from '@docsvision/webclient/System/BaseControl';
import { FieldSpec } from '@docsvision/webclient/System/GetFieldName';
import { BasicApiEvent, CancelableApiEvent } from '@docsvision/webclient/System/ApiEvent';
import { CancelableEvent } from '@docsvision/webclient/System/CancelableEvent';
import { IEventArgs } from '@docsvision/webclient/System/IEventArgs';
import { SimpleEvent } from '@docsvision/webclient/System/SimpleEvent';
export declare class EventEmitter<PreEventArgsT = IEventArgs, PostEventArgsT = IEventArgs> {
    protected preEvent: CancelableEvent<PreEventArgsT>;
    protected postEvent: SimpleEvent<PostEventArgsT>;
    constructor(preEvent: CancelableApiEvent<PreEventArgsT>, postEvent: BasicApiEvent<PostEventArgsT>);
    static Create<T, PreEventArgsT, PostEventArgsT>(state: T, sender: LayoutControl, preEventField?: FieldSpec<T, CancelableApiEvent<PreEventArgsT>>, postEventField?: FieldSpec<T, BasicApiEvent<PostEventArgsT>>): EventEmitter<PreEventArgsT, PostEventArgsT>;
    perform<T>(action: () => JQueryDeferred<T> | T, preArgs?: PreEventArgsT, postArgs?: PostEventArgsT, onReject?: (reason: any) => void): JQueryDeferred<T>;
    triggerPreEvent: (preArgs?: PreEventArgsT) => JQueryDeferred<void>;
    triggerPostEvent: (postArgs?: PostEventArgsT) => void;
}
