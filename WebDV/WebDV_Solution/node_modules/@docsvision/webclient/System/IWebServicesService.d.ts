import { RequestOptions } from '@docsvision/webclient/Legacy/Utils';
import { IWebServicesConnection } from '@docsvision/webclient/System/IWebServicesConnection';
import { IWebServicesInfo } from '@docsvision/webclient/System/IWebServicesInfo';
import { IWebServicesRequest } from '@docsvision/webclient/System/IWebServicesRequest';
/** Реализует взаимодействие с агентом веб-сервисов. */
export interface IWebServicesService {
    /** Пытается подключится к агенту веб-сервисов. В случае неудачи генерирует исключение. */
    check(): JQueryDeferred<IWebServicesInfo>;
    /**
     * Отправляет сообщение в агент веб-сервисов методом GET, и возвращает полученный ответ.
     * @param plugin Адрес плагина, для которого предназначено сообщение.
     * @param action Действие плагина, которое необходимо выполнить. Может быть не задано.
     * @param message JavaScript объект, содержащий параметры запроса.
     * @returns JavaScript объект ответа.
     */
    get<T>(plugin: string, message: IWebServicesRequest<T>, options?: RequestOptions): JQueryDeferred<T>;
    /**
     * Отправляет сообщение в агент веб-сервисов методом POST, и возвращает полученный ответ.
     * @param plugin Адрес плагина, для которого предназначено сообщение.
     * @param action Действие плагина, которое необходимо выполнить. Может быть не задано.
     * @param message JavaScript объект, содержащий параметры запроса.
     * @returns JavaScript объект ответа.
     */
    post<T>(plugin: string, message: IWebServicesRequest<T>, options?: RequestOptions): JQueryDeferred<T>;
    /**
     * Открывает соединение с плагином агента черзе веб-сокеты.
     * @param plugin Адрес плагина, с которым планируется начать взаимодействие.
     * @returns Объект соединения, через который можно отправлять запросы и получать ответы.
     */
    connect(plugin: string): JQueryDeferred<IWebServicesConnection>;
}
export declare type $WebServices = {
    webServices: IWebServicesService;
};
export declare const $WebServices: string | ((model?: $WebServices) => IWebServicesService);
