import { GenModels } from '@docsvision/webclient/Generated/DocsVision.WebClient.Models';
export declare function isDirectoryFilterInSelectedPath<TNode extends GenModels.IDirectoryItemData>(selectedPath: TNode[], predefinedFilter: TNode): boolean;
export declare function getDirectoryFilterPath<TNode extends GenModels.IDirectoryItemData>(predefinedFilter: TNode, selectedFilterPath: TNode[]): TNode[];
export declare function getDirectoryFilter<TNode extends GenModels.IDirectoryItemData>(predefinedFilter: TNode, selectedFilterPath: TNode[]): TNode | undefined;
export declare function getDirectoryFilterId<TNode extends GenModels.IDirectoryItemData>(predefinedFilter: TNode, selectedFilterPath: TNode[]): string | undefined;
/**
 * Фильтрует путь selectedPath с учётом predefinedFilter
 *
 * Если selectedPath не существует, то возвращается пустой массив.
 * Если predefinedFilter не существует, то возвращается исходный selectedPath или пустой массив, если selectedPath не существует.
 * Если predefinedFilter входит в состав selectedPath, то selectedPath обрезается так,
 * что остаются только элементы, первый из которых равен predefinedFilter, а остальные идут глубже по дереву.
 * Если predefinedFilter не входит в состав selectedPath, то возвращается исходный selectedPath.
 *
 * @param selectedPath Выбранное значение фильтра.
 * @param predefinedFilter Значение фильтра, которое которое недоступно для очистки в пользовательском интерфейсе.
 */
export declare function filterSelectedPath<NodeT extends GenModels.IDirectoryItemData>(selectedPath: NodeT[], predefinedFilter: NodeT): NodeT[];
/**
 * Входит ли значение predefinedFilter в состав selectedPath.
 * @param selectedPath Выбранное значение фильтра.
 * @param predefinedFilter Значение фильтра, которое которое недоступно для очистки в пользовательском интерфейсе.
 */
export declare function isFilterInSelectedPath<NodeT extends GenModels.IDirectoryItemData>(selectedPath: NodeT[], predefinedFilter: NodeT): boolean;
