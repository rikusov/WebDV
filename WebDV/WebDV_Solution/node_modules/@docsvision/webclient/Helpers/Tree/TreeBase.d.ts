import { ITreeNodeData } from "@docsvision/webclient/Helpers/Tree/Data/ClientModels/ITreeNodeData";
import { TreeNode } from "@docsvision/webclient/Helpers/Tree/Data/ClientModels/TreeNode";
import { ITreeBaseProps } from "@docsvision/webclient/Helpers/Tree/ITreeBaseProps";
import { ITreeBaseState } from "@docsvision/webclient/Helpers/Tree/ITreeBaseState";
import { SimpleEvent } from "@docsvision/webclient/System/SimpleEvent";
import React from "react";
/** @internal */
export declare class TreeBase<TreeNodeDataT extends ITreeNodeData, TProps extends ITreeBaseProps<TreeNodeDataT>, TState extends ITreeBaseState> extends React.Component<TProps, TState> {
    treeContainer: HTMLElement;
    nodeExpandedEvent: SimpleEvent<TreeNode>;
    nodeCollapsedEvent: SimpleEvent<TreeNode>;
    nodeSelectedEvent: SimpleEvent<TreeNode>;
    state: TState;
    constructor(props: TProps);
    componentDidMount(): void;
    setNewNodes(nodes: TreeNode[]): void;
    setNodes(nodesData: TreeNodeDataT[], parentNode?: TreeNode): void;
    addNodes(nodesData: TreeNodeDataT[], parentNode?: TreeNode): void;
    selectNode(node: TreeNode, resetOthers?: boolean): void;
    toggleNode(node: TreeNode, expand: boolean, raiseEvent?: boolean): void;
    clearSelection(): void;
    readonly nodes: TreeNode[];
    readonly selectedNodes: TreeNode[];
    readonly selectedNode: TreeNode;
    readonly nodeSelected: SimpleEvent<TreeNode>;
    readonly nodeExpanded: SimpleEvent<TreeNode>;
    readonly nodeCollapsed: SimpleEvent<TreeNode>;
    findNode(predicate: (node: TreeNode) => boolean): TreeNode;
    findNodes(predicate: (node: TreeNode) => boolean): TreeNode[];
    focusFirstNode(): void;
    protected attachTreeContainer: (elem: HTMLElement) => void;
    protected findAllNodes(predicate: (node: TreeNode) => boolean, currentNodes: TreeNode[], result: TreeNode[]): void;
    protected onNodeSelected(node: TreeNode): void;
    protected onNodeAccepted(node: TreeNode): void;
    protected onNodeExpanded(node: TreeNode): void;
    protected onNodeCollapsed(node: TreeNode): void;
    protected readonly levelIdent: string;
    protected readonly expandedToggleMarkerClass: string;
    protected readonly collapsedToggleMarkerClass: string;
    protected readonly multiSelect: boolean;
    protected isNodeSelected(node: TreeNode): boolean;
    protected loadData(data: ITreeNodeData[], level: number, parent: TreeNode): TreeNode[];
    protected createNode(data: ITreeNodeData, level: number, parent: TreeNode, children?: TreeNode[]): TreeNode;
    protected onToggleClick(node: TreeNode, event: React.SyntheticEvent<any>): void;
    protected onNodeClick(node: TreeNode, event: React.MouseEvent<any>): void;
    protected onNodeDoubleClick(node: TreeNode, event: React.MouseEvent<any>): void;
    componentWillReceiveProps(nextProps: ITreeBaseProps<TreeNodeDataT>, nextContext: any): void;
    protected calcTree(): void;
    protected calcTreeItem(node: TreeNode): number;
    protected getNode(index: any, nodes: TreeNode[]): TreeNode;
    protected onNodeBlur(node: TreeNode): void;
    protected onNodeFocus(node: TreeNode): void;
    protected onNodeKeyDown(node: TreeNode, index: number, ev: React.KeyboardEvent<any>): void;
    protected renderToggleMarker(node: TreeNode): JSX.Element;
    protected shouldFocus: (node: TreeNode, elem: HTMLElement) => boolean;
    protected renderNode(index: any, key: any): JSX.Element;
    getVirtualizationType(): string;
    render(): JSX.Element;
}
