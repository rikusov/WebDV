/// <reference types="react" />
import { GenModels } from '@docsvision/webclient/Generated/DocsVision.WebClient.Models';
import { IEditPopoverProps } from "@docsvision/webclient/Helpers/PopoverHelpers/EditPopover/IEditPopoverProps";
import { TextArea, TextAreaParams } from "@docsvision/webclient/Platform/TextArea";
import { TextControlBaseImpl, TextControlBaseState } from "@docsvision/webclient/Platform/TextControlBaseImpl";
import { RequestHelper } from '@docsvision/webclient/System/RequestHelper';
/** @internal */
export interface TextAreaState extends TextAreaParams, TextControlBaseState {
    asyncLoader: RequestHelper;
}
/** @internal */
export declare type TextAreaImplState = TextAreaState;
/** @internal */
export declare class TextAreaImpl extends TextControlBaseImpl<TextAreaParams, TextAreaState> {
    private editInPlaceLoader;
    private popoverImageDisplay;
    constructor(props: TextAreaParams, state: TextAreaState);
    componentDidMount(): void;
    componentWillUnmount(): void;
    private removeElements;
    protected init(): JQueryDeferred<void>;
    protected loadAsync(bindingInfo: GenModels.SimpleBindingInfo): JQueryDeferred<void>;
    setValue(value: string, redraw: boolean): void;
    /** Тоже что и {@link InputBasedControlParams.value} */
    value: string;
    protected onValueClick(event: any): void;
    protected valueIsMultiline(): boolean;
    renderPlaceholder(): JSX.Element;
    protected renderInput(): JSX.Element;
    viewModeRender(): JSX.Element;
    editInPlaceModeRender(): JSX.Element;
    renderValueAsHtml(): JSX.Element;
    protected renderInto(props: TextAreaParams, container: HTMLElement): void;
    protected showEditPopover(popoverOptions?: IEditPopoverProps): JQueryDeferred<TextArea>;
    protected getNumValueOfWidth(): number;
    protected attachInput(inputElem: any): void;
    protected attachEditInPlaceLoader: (elem: any) => void;
    protected initSummernote(): Promise<void>;
    private onDocumentMouseDown;
    protected onSummernoteImageUpload(files: FileList): void;
    renderControl(): JSX.Element;
}
