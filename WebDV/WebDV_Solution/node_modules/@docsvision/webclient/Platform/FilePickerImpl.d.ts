/// <reference types="react" />
import { GenModels } from '@docsvision/webclient/Generated/DocsVision.WebClient.Models';
import { IFilePickerMenuItem } from '@docsvision/webclient/Platform/FilePickerMenu';
import { FilePickerAccessState } from '@docsvision/webclient/Platform/FilePickerMenuItemsView';
import { FilePickerParams } from "@docsvision/webclient/Platform/FilePicker";
import { FilePickerOperations } from '@docsvision/webclient/Platform/FilePickerOperations';
import { FilePickerOperationsAvailability } from '@docsvision/webclient/Platform/FilePickerOperationsAvailability';
import { IFilePickerValue } from '@docsvision/webclient/Platform/IFilePickerValue';
import { BaseControlState } from "@docsvision/webclient/System/BaseControl";
import { BaseControlImpl } from "@docsvision/webclient/System/BaseControlImpl";
import { IBindingResult } from '@docsvision/webclient/System/IBindingResult';
import { RequestHelper } from '@docsvision/webclient/System/RequestHelper';
import { BooleanState } from '@docsvision/webclient/System/BooleanState';
import { EventEmitter } from '@docsvision/webclient/System/EventEmitter';
import { IValidationParams } from '@docsvision/webclient/System/IValidationParams';
import { IValidationResult } from '@docsvision/webclient/System/IValidationResult';
/** @internal */
export interface FilePickerState extends FilePickerParams, BaseControlState {
    binding: IBindingResult<GenModels.FileCardModel>;
    lastUploadCommand: "replace" | "addVersion";
    menuActionHelper: RequestHelper;
    downloadOperationId: string;
    readOperationId: string;
    validationMessage: string;
}
/** @internal */
export declare class FilePickerImpl extends BaseControlImpl<FilePickerParams, FilePickerState> {
    protected menuOpen: BooleanState;
    protected fileOpenEvents: EventEmitter;
    protected previewEvents: EventEmitter;
    protected openCommentsDialogEvents: EventEmitter;
    protected closeCommentsDialogEvents: EventEmitter;
    protected commentAddEvents: EventEmitter;
    protected commentDeleteEvents: EventEmitter;
    protected downloadEvents: EventEmitter;
    protected openVersionsDialogEvents: EventEmitter;
    protected closeVersionsDialogEvents: EventEmitter;
    protected operations: FilePickerOperations;
    protected availability: FilePickerOperationsAvailability;
    protected dragOverState: BooleanState;
    constructor(props: FilePickerParams, state: FilePickerState);
    componentDidMount(): void;
    getCssClass(): string;
    setValue(val: IFilePickerValue, redraw?: boolean, triggerEvent?: boolean): void;
    getValue(): IFilePickerValue;
    hasValue(): boolean;
    uploadSelectedInternal(): JQueryDeferred<GenModels.FileCardModel>;
    onMenuOpenChange: (newVal: boolean) => void;
    protected shouldSaveImmediately(): boolean;
    protected getAccessState(): FilePickerAccessState;
    openVersionsDialog: () => Promise<void>;
    protected getMenuItems(): IFilePickerMenuItem[];
    wrapMenuAction: (action: () => JQueryDeferred<any>) => () => JQueryDeferred<any>;
    uploadSelected: () => JQueryDeferred<any>;
    protected onFileSelected: (file: File) => JQueryDeferred<any>;
    getDownloadMenuItem: () => {
        name: string;
        component: (props: 
import("./Components/FilePickerMenuItemsView").IDownloadFilePickerMenuItemProps) => JSX.Element;
        isAvailable: boolean;
        onClick: () => JQueryDeferred<any>;
    };
    getReplaceMenuItem: () => {
        name: string;
        component: (props: 
import("./Components/FilePickerMenuItemsView").IFilePickerMenuItemProps) => JSX.Element;
        isAvailable: boolean;
        onClick: () => JQueryDeferred<any>;
    };
    getAddVersionMenuItem: () => {
        name: string;
        component: (props: 
import("./Components/FilePickerMenuItemsView").IFilePickerMenuItemProps) => JSX.Element;
        isAvailable: boolean;
        onClick: () => JQueryDeferred<any>;
    };
    getCommentMenuItem: () => {
        name: string;
        component: (props: 
import("./Components/FilePickerMenuItemsView").IFilePickerMenuItemProps) => JSX.Element;
        isAvailable: boolean;
        onClick: () => JQueryDeferred<void>;
    };
    getPreviewMenuItem: () => {
        name: string;
        component: (props: 
import("./Components/FilePickerMenuItemsView").IFilePickerMenuItemProps) => JSX.Element;
        isAvailable: boolean;
        onClick: () => JQueryDeferred<any>;
    };
    getOpenMenuItem: () => {
        name: string;
        component: (props: 
import("./Components/FilePickerMenuItemsView").IFilePickerMenuItemProps) => JSX.Element;
        isAvailable: boolean;
        onClick: () => JQueryDeferred<any>;
    };
    getDeleteMenuItem: () => {
        name: string;
        component: (props: 
import("./Components/FilePickerMenuItemsView").IFilePickerMenuItemProps) => JSX.Element;
        isAvailable: boolean;
        onClick: () => JQueryDeferred<any>;
    };
    saveAs(): JQueryDeferred<Blob>;
    validate(params: IValidationParams): IValidationResult;
    protected updateValidationMessage(): void;
    protected renderValidationMessage(): JSX.Element;
    renderMenu(): JSX.Element;
    renderEmptyMode(): JSX.Element;
    renderValue(): JSX.Element;
    renderControl(): JSX.Element;
}
