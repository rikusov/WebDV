import { RightSidebar } from "@docsvision/webclient/Legacy/RightSidebar";
import { CardInfoModel } from "@docsvision/webclient/Legacy/CardInfoModel";
import { ILayout } from "@docsvision/webclient/System/$Layout";
import { IRealTimeCommunicationMessage } from "@docsvision/webclient/System/IRealTimeCommunicationMessage";
import { $CardTimestamp } from '@docsvision/webclient/System/LayoutServices';
export declare class TaskCardView {
    private static DelegateListClassName;
    private static ReportPanelClassName;
    private static ShowCommentsButtonId;
    private static CommentFormId;
    private static TaskCommentsId;
    private static TaskCommentCountId;
    protected widget: HTMLElement;
    protected widgetId: string;
    private commentForm;
    private reportPanel;
    constructor(widgetId: string);
    private Initialize;
    protected onCardChanged: (message: IRealTimeCommunicationMessage<any>) => void;
    private ShowDelegateList;
    private SaveComment;
    private RefreshComments;
    private readonly CommentsContainer;
    private readonly CommentData;
    readonly CardInfo: CardInfoModel;
    private InitializeCommentsPanel;
    private AnimateCommentButtons;
    private EditComment;
    private DeleteComment;
    EditCommentMode: boolean;
    private ExpandCommentsEventHandler;
}
export declare class TaskReportPanel {
    private static ReportContainerClassName;
    private static ReportTextClassName;
    private static DropZoneWithReportContentClassName;
    private static DropZoneWithFilesClassName;
    private static CommandExpandCssClass;
    private static FileLinkCssClass;
    private panel;
    private layout;
    private reportContainer;
    private commandBtn;
    private reportText;
    private dropZoneWithFiles;
    private dropZoneWithReportContent;
    private linkControl;
    private reportForm;
    private traceProvider;
    constructor(layout: ILayout | TaskCardView, element: Element);
    private Initialize;
    private SaveTextReport;
    private SaveReportButton;
    private CancelReportButton;
    private GetTextReportData;
    private readonly ReportInput;
    private ShowReportInput;
    private CommandExpandEventHandler;
}
/** @internal */
export interface ITaskDecisionOptions {
    buttonsCount?: number;
}
export declare class TaskDecision {
    static WidgetClassName: string;
    private static DecisionSelector;
    private selectedDecisionItem;
    private reverseBtn;
    private buttons;
    private sidebar;
    private moreButton;
    private moreButtonInnerText;
    services: $CardTimestamp;
    private widget;
    constructor(widgetId: string, needReverseBtn?: boolean, options?: ITaskDecisionOptions);
    private Initialize;
    protected RunDecision(item: HTMLElement): JQueryDeferred<any>;
    protected ShowPanel(response: any, isSingleClick?: boolean): JQueryDeferred<any>;
    protected SubmitForm(form: HTMLFormElement, panel: RightSidebar, isSingleClick?: boolean): void;
    protected SendFormData(form: HTMLFormElement, panel: RightSidebar, callback?: Function): JQueryDeferred<any>;
    /** cspell:ignore Excecute */
    protected ExcecuteDecision(url: string, needShowDialog: boolean, callback?: Function): JQueryDeferred<any>;
    protected readonly SelectedDecision: HTMLElement;
    protected readonly Widget: HTMLElement;
    private AddMoreButton;
}
