import { BasicGridHtmlBuilder } from '@docsvision/webclient/Legacy/BasicGridHtmlBuilder';
import { GenModels } from '@docsvision/webclient/Generated/DocsVision.WebClient.Models';
import { GridOptions } from '@docsvision/webclient/Legacy/GridOptions';
export declare class DesktopGridHtmlBuilder extends BasicGridHtmlBuilder {
    private tableHeader;
    private tableBody;
    private gridFooter;
    private rowsSelectionModeEnabled;
    buildGrid(model: GenModels.GridViewModel, targetElement: HTMLElement, rootElement: HTMLElement): void;
    applyGridFilter(): Promise<void>;
    rebuildIfNeeded(isBuild: boolean, model?: GenModels.GridViewModel): void;
    rowsSelectionMode: boolean;
    private updateHeadVisibility;
    buildTableHeader(options: GridOptions, tableHeaderContainer: HTMLElement, modelGrid?: GenModels.GridViewModel): void;
    protected shouldBuildHeader(columns: GenModels.GridColumn[], headerElements: NodeListOf<Element>): boolean;
    protected buildRow(model: GenModels.GridViewModel, rowIndex: number): HTMLTableRowElement;
    protected createGroupRow(model: GenModels.GridViewModel, groups: GenModels.GridRow[], body: HTMLElement, isOpen: boolean, groupId: string, rowIndex: number): HTMLTableRowElement;
    protected initRowClick(cardID: string, element: HTMLElement): void;
    protected applyGridFilters(model: GenModels.GridViewModel, targetElement: HTMLElement, rootElement: HTMLElement): void;
    getChanges(): Promise<GenModels.GridViewModel>;
    protected buildInOrder(): void;
    protected onRefreshButtonClick(): void;
    protected buildRowSwitcher(options: GridOptions, model: GenModels.GridViewModel, rowSwitcher: HTMLDivElement, rootElement: HTMLElement): HTMLDivElement;
    private refreshLayoutToMakeIEBugsRunAway;
}
