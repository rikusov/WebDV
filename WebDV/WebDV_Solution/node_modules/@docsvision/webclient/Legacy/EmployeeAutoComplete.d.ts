import { Control } from "@docsvision/webclient/Legacy/Control";
import { IEmployeeItemData } from "@docsvision/webclient/Legacy/IEmployeeItemData";
/** @internal */
export declare class EmployeeAutoComplete extends Control {
    inputElement: HTMLInputElement;
    hiddenElement: HTMLInputElement;
    hiddenLabel: HTMLElement;
    private selectedItemsContainer;
    selectedItemsList: HTMLElement;
    private allBtn;
    private MoreBtn;
    private DirectoryBtn;
    private ErrorSpan;
    private labelElement;
    private itemCount;
    private lastLoadedCount;
    private favoriteStorage;
    private useStorage;
    private hasMore;
    private kindId;
    private allowMultiple;
    /** @deprecated */
    private selectCallback;
    private deleteItemCallback;
    private filter;
    private showAllItemsIfNoResultsOnNextLoad;
    private noResultsOnLastLoad;
    private isSelected;
    private OnSelectValidation;
    private employeeInfo;
    private dropDownMinWidth;
    constructor(root: HTMLElement);
    SelectCallback: (employeeData: IEmployeeItemData) => void;
    SelectingCallback: (employeeData: IEmployeeItemData) => JQueryDeferred<any>;
    FocusoutCallback: Function;
    DeletingItemCallback: (employeeId: string) => JQueryDeferred<any>;
    DeleteItemCallback: (employeeId: string) => void;
    SetFilter(filter: string[]): void;
    readonly AllowMultiple: boolean;
    KindId: string;
    readonly Value: string;
    getEmployeeInfo(id: string): any;
    private needValidate;
    readonly NeedValidate: boolean;
    private readonly LastMenu;
    private FavoriteEmployees;
    private CloseAutoComplete;
    private onItemsLoaded;
    Init(): void;
    private hasAdditionalValidate;
    SetFocus(): void;
    DisableOnKeyUpValidation(): void;
    Validate(throwError?: boolean): boolean;
    ResetValidationError(): void;
    private DeleteItem;
    private AddToFavorite;
    private LoadAll;
    private GetEmployeesList;
    private arrayUnique;
    private GetEmployeeFromServer;
}
