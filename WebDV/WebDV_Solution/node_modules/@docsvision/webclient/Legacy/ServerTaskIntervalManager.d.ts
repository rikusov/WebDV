import { GenModels } from '@docsvision/webclient/Generated/DocsVision.WebClient.Models';
import { $BusinessCalendarController } from '@docsvision/webclient/Generated/DocsVision.WebClient.Controllers';
import { ServerTaskInterval } from '@docsvision/webclient/Legacy/ServerTaskInterval';
export declare class ServerTaskIntervalManager {
    private services;
    private _startDate;
    private _endDate;
    private _duration;
    private _executionType;
    private _intervals;
    private _defaultCalendarId;
    private _useBusinessCalendar;
    constructor(services: $BusinessCalendarController);
    initialize(defaultCalendarId: string, useBusinessCalendar: boolean): void;
    initializeExecutionType(executionType: GenModels.ExecutionType): void;
    readonly startDate: Date;
    readonly endDate: Date;
    readonly duration: number;
    readonly executionType: GenModels.ExecutionType;
    intervals: ServerTaskInterval[];
    readonly defaultCalendarId: string;
    readonly useBusinessCalendar: any;
    autoDurationsRecalculation: boolean;
    changeTotalRange(startDate: Date, endDate: Date, duration: number): JQueryDeferred<ServerTaskInterval[]>;
    initializeTotalRange(startDate: Date, endDate: Date, duration: number): void;
    changeExecutionType(executionType: GenModels.ExecutionType): JQueryDeferred<ServerTaskInterval[]>;
    private updateParallelIntervals;
    calculateIntervalDates(): JQueryDeferred<ServerTaskInterval[]>;
    addInterval(interval: ServerTaskInterval): JQueryDeferred<ServerTaskInterval[]>;
    removeInterval(interval: ServerTaskInterval): JQueryDeferred<ServerTaskInterval[]>;
    moveTaskIntervalUp(interval: ServerTaskInterval): JQueryDeferred<ServerTaskInterval[]>;
    moveTaskIntervalDown(interval: ServerTaskInterval): JQueryDeferred<ServerTaskInterval[]>;
    distributeDurations(targetIntervalIndex: number, oldStartDate: Date, newStartDate: Date, oldDuration: number, newDuration: number): Promise<void>;
    private distributeDurationsInternal;
}
