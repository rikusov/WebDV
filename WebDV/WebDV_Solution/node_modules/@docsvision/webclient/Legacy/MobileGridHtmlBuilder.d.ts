import { BasicGridHtmlBuilder } from '@docsvision/webclient/Legacy/BasicGridHtmlBuilder';
import { GridOptions } from '@docsvision/webclient/Legacy/GridOptions';
import { GenModels } from '@docsvision/webclient/Generated/DocsVision.WebClient.Models';
export declare class MobileGridHtmlBuilder extends BasicGridHtmlBuilder {
    private mobileGridContainer;
    private groupSelectionModeEnabled;
    longTapFlag: boolean;
    commonGridModel: GenModels.GridViewModel;
    constructor(options: GridOptions, targetElement: HTMLElement);
    buildGrid(model: GenModels.GridViewModel, targetElement: HTMLElement, rootElement: HTMLElement): void;
    rebuildIfNeeded(isBuild: boolean, model?: GenModels.GridViewModel): void;
    reload(): JQueryDeferred<any>;
    applyGridFilter(): Promise<void>;
    buildMobileGrid(options: GridOptions, rootElement: HTMLElement): void;
    getChanges(): Promise<GenModels.GridViewModel>;
    rowsSelectionMode: boolean;
    protected destroyMobileGrid(): void;
    protected AddPage(model: GenModels.GridViewModel, isFirstPage: boolean): void;
    protected setRowSelection(itemRow: HTMLDivElement, selectedRowColor: string): void;
    protected applyGridFilters(model: GenModels.GridViewModel, targetElement: HTMLElement, rootElement: HTMLElement): void;
    protected buildInOrder(): void;
    protected onRefreshButtonClick(): void;
    protected buildRowSwitcher(options: GridOptions, model: GenModels.GridViewModel, rowSwitcher: HTMLDivElement, rootElement: HTMLElement): HTMLDivElement;
    protected updateHtmlRowReadStatus(itemID: string, setRead: boolean): void;
    protected countNotClosable(model: GenModels.GridViewModel, i: number): any;
    private AddShowCardMobileEvent;
    private buildMobilePaging;
    private destroyMobilePaging;
    private AddLoadMoreClick;
    private loadMoreData;
}
